[[[4,"search_configuration_renderers.html"],[2,"Renderers - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"renderers"],[1,"Renderers"],[0,"\n\n\n  Certain parts of the APIs here (highlighted in red) may be particularly unstable still.\n\nThis page covers the a more advanced API, “renderers”, that allows you to customise the html output structure to some degree.\nSome use cases for this include:\n\nThe default structure is not sufficient for your styling needs\nYou need to attach additional event listeners to elements\nYou want to override or insert additional content sourced from custom fields / static content (e.g. a footer)\nYou want to change the default use case of following through on a result preview to its source document entirely\n\nIf you only need to style the dropdown or search popup, you can include your own css file to do so and / or override the variables exposed by the default css bundle.\nThese API options are similarly specified under the uiOptions key of the root configuration object.\ninitMorsels({\n    uiOptions: {\n        // ...\n    }\n});\n\nAs the interfaces are rather low level, this page will cross reference the UiOptions interface specification directly.\n"],[3,"the-h-function"],[1,"The h function"],[0,"\nh\nAlmost all renderer functions are passed a “h” function. This is an optional helper function you may use to create your own renderer.\nThe method signature is as such:\nexport type CreateElement = (\n  // Element name\n  name: string,\n\n  // Element attribute map\n  attrs: { [attrName: string]: string },\n\n  // Child elements (HTMLElement) OR text nodes (just put the string)\n  // string parameters utilise .textContent,\n  // so you don't have to worry about escaping potentially malicious content\n  ...children: (string | HTMLElement)[]\n) => HTMLElement;\n\n"],[3,"passing-custom-options"],[1,"Passing Custom Options"],[0,"\nopts\nAll renderer functions are also passed an opts parameter. This is the original input object that you provided to the initMorsels call. Default parameters are however populated at this point.\ni.e.,\nopts = export interface SearchUiOptions {\n  searcherOptions?: SearcherOptions,\n  uiOptions?: UiOptions,\n  isMobileDevice: () => boolean,\n  otherOptions: ArbitraryOptions\n}\n\nIf you want to include some custom options (e.g. an API base url) somehwere, you can use the otherOptions key, which is guaranteed to be untouched by morsels.\n"],[3,"default-html-output-structure"],[1,"Default Html Output Structure"],[0,"\nYou can have a look at the documentation further below on each API to understand each renderer, then refer back to the following output placement snippet to understand which renderers are responsible for which parts of the html output.\nThe output also varies depending on the UI mode specified earlier. As usual, note that dropdown and fullscreen modes both apply to the auto mode.\n\nRenderers and their output placement\n<!--\n    dropdownRootRender - mode: 'dropdown'\n    fsRootRender       - mode: 'fullscreen'\n -->\n\n<!--\n    **fsRootRender** START\n    root element is a backdrop to facilitate backdrop dismiss\n-->\n<div class=\"morsels-fs-backdrop\">\n  \n  <!-- **dropdownRootRender** START -->\n  <!-- fsRootRender has an additional \"morsels-fs-root\" class on this element -->\n  <div class=\"morsels-root\">\n\n    <!-- these two elements are for dropdownRootRender only -->\n    <input id=\"morsels-search\" placeholder=\"Search\">\n    <div class=\"morsels-input-dropdown-separator\" style=\"display: none;\"></div>\n\n    <!--\n        this element is for fsRootRender only,\n        for wrapping search box & close button in a sticky header\n    -->\n    <div class=\"morsels-fs-input-button-wrapper\">\n        <input class=\"morsels-fs-input\" type=\"text\">\n        <button class=\"morsels-input-close-fs\"></button>\n    </div>\n\n    <ul class=\"morsels-list\" style=\"display: none;\">\n    <!--\n        **dropdownRootRender / fsRootRender** END\n        \n        NOTE: If using mode = 'target', the above ul element is\n              substituted for the target element you specify\n    -->\n\n        <!-- **noResultsRender** START -->\n        <div class=\"morsels-no-results\">No results found</div>\n        <!-- **noResultsRender** END -->\n\n        <!-- **fsBlankRender** START\n          Shown for the fullscreen version, when the search box is empty\n          This is the shown text \"Start Searching Above!\" when the input is empty,\n          implemented inside a ::before pseudo class for easy overriding.\n        -->\n        <div class=\"morsels-fs-blank\"></div>\n        <!-- **fsBlankRender** END -->\n\n        <!--\n          **loadingIndicatorRender** START (blank by default)\n\n          Shown when making the initial search from a blank search box.\n          Subsequent searches (ie. when there are some results already)\n          will not show this indicator.\n        -->\n        <span class=\"morsels-loading-indicator\"></span>\n        <!-- **loadingIndicatorRender** END -->\n\n        <!-- **termInfoRender** START (intentionally blank by default) -->\n        <div></div>\n        <!-- **termInfoRender** END -->\n\n        <!-- results placeholder (refer to \"rendering search results\") -->\n    </ul>\n  </div>\n</div>\n\n\nYou can find the latest default implementations of the renderers here.\n"],[3,"root-elements"],[1,"Root Elements"],[0,"\n"],[3,"dropdown"],[1,"Dropdown"],[0,"\ndropdownRootRender(h, opts, inputEl): { root: HTMLElement, listContainer: HTMLElement }\nThis API renders the root element for the dropdown version of the user interface.\n\ninputEl: Input element found by the input configuration option\n\nIt should return 2 elements:\n\nroot: The root element. This is passed to the hide / show APIs below.\nlistContainer: The element to attach elements rendered by listItemRender (matches for a single document) to.\n\nin the above snippet, this is the <ul class=\"morsels-list\"></ul> element\n\n\n\n"],[3,"supplementary-mandatory-functions"],[1,"Supplementary Mandatory Functions"],[0,"\nThe following two functions should be implemented in tandem with the above function; They are used internally to show / hide the dropdown on certain events (for example, on input focus / blur).\nshowDropdown?: (root: HTMLElement, opts: SearchUiOptions) => void\nhideDropdown?: (root: HTMLElement, opts: SearchUiOptions) => void\nFor example, the default showDropdown implementation is as such:\n(root, listContainer) => {\n  if (listContainer.childElementCount) {\n    listContainer.style.display = 'block';\n    (listContainer.previousSibling as HTMLElement).style.display = 'block';\n  }\n}\n\nIt first checks if the listContainer (the dropdown), which contains result matches, has any child elements. If so, it sets style=display:block; on it, and its previous sibling, which is the triangle dropdown separator container.\n"],[3,"fullscreen"],[1,"Fullscreen"],[0,"\nfsRootRender(h, opts, fsCloseHandler): { root: HTMLElement, listContainer: HTMLElement, input: HTMLInputElement }\nThis API renders the root element for the fullscreen version of the user interface.\n\nfsCloseHandler: A void function used for closing the fullscreen UI. This may also be used to check if the current render is for the fullscreen UI or dropdown UI.\n\nIt should return 3 elements:\n\nroot: The root element. This is passed to the hide / show APIs below.\nlistContainer: The element to attach elements rendered by listItemRender (matches for a single document) to.\ninput: Input element. This is required for morsels to attach input event handlers.\n\n"],[3,"supplementary-mandatory-functions-1"],[1,"Supplementary Mandatory Functions"],[0,"\nSimilarly, there are two show / hide variants for the fullscreen version:\nshowFullscreen?: (\n  root: HTMLElement,\n  listContainer: HTMLElement,\n  fullscreenContainer: HTMLElement,\n  opts: SearchUiOptions,\n) => void,\n\nhideFullscreen?: (\n  root: HTMLElement,\n  listContainer: HTMLElement,\n  fullscreenContainer: HTMLElement,\n  opts: SearchUiOptions\n) => void,\n\nThe fullscreenContainer (by default the <body> element) to which to append the root element is also provided. You may also want to for example, refocus the fullscreen version’s <input> element once UI is shown.\n"],[3,"target"],[1,"Target"],[0,"\nThere is no root element for the target, as it is specified by the target option. The equivalent of the target element would be the listContainer element for the dropdown / fullscreen versions  above.\n"],[3,"miscellaneous-renderers"],[1,"Miscellaneous Renderers"],[0,"\nFunctionReturnDescription\nnoResultsRender(h, opts)HTMLElementThis API renders the element attached under the listContainer (or the target element when using mode = 'target') when there are no results found for a given query.                                                                                     \nloadingIndicatorRender(h, opts)HTMLElementThis API renders the loading indicator attached under the listContainer. The loading indicator is shown when making the initial search (the first search from an empty search box).\ntermInfoRender(h, opts, queryParts: QueryPart[])HTMLElement[]This API renders element(s) attached under the listContainer related to the searched terms, and is blank by default.This can be used to render messages like “Did you mean spelling? “.\nfsBlankRender(h, opts)( mode='fullscreen' only )HTMLElementThis API renders the element attached under the listContainer when the search box is empty for the fullscreen UI.This contrasts with the dropdown UI which is hidden in such a case.\n\n"],[3,"queryparts-parameter"],[1,"queryParts Parameter"],[0,"\nThis parameter to the termInfoRender function is the parsed structure of the input query string.\nIts interface is as follows:\nexport interface QueryPart {\n  partType: 'TERM' | 'PHRASE' | 'BRACKET' | 'AND' | 'NOT';\n\n  // Raw, original term(s) contained, if any of the below 3 operations were applied\n  originalTerms?: string[];\n\n  isCorrected?: boolean;        // did this query part undergo spelling correction?\n  isStopWordRemoved?: boolean;  // did this query part undergo stop word removal?\n  isExpanded?: boolean;         // is this an added / expanded term?\n\n  shouldExpand?: boolean;       // was this term a source for query term expansion?\n\n  fieldName?: string;           // was a field filter applied?\n\n  // Spelling corrected / Expanded / Stop word removed result\n  terms?: string[];\n\n  children?: QueryPart[];\n}\n\n"],[3,"rendering-search-results"],[1,"Rendering Search Results"],[0,"\nThe below 2 remaining sets of APIs render the results for all document matches, and are mutually exclusive in that the second set of APIs are “building blocks” of the first (which only has one available API). So, reconfiguring the first API would invalidate any changes to the second.\nTogether, they are placed in the <!-- results placeholder (refer to \"rendering search results\") --> comment earlier (see html output structure).\nIn the following snippet, APIs belonging to the first / second are annotated with 1. & 2..\n\nRemaining renderers and their output placement\n<!--\n  **1. resultsRender** START matches for all documents\n  **2. listItemRender** START A match for a single document\n-->\n<li class=\"morsels-list-item\">\n  <a class=\"morsels-link\" href=\"http://192.168.10.132:3000/...truncated.../index.html\">\n\n    <div class=\"morsels-title\">\n      <span>\n        This is the Document Title Extracted from the \"title\" Field\n      </span>\n    </div>\n\n    <!--\n      **headingBodyRender** START\n      a heading and/or body field pair match for the document\n    -->\n    <a class=\"morsels-heading-body\" href=\"http://192.168.10.132:3000/...truncated.../index.html#what\">\n      <!-- Sourced from the \"heading\" field -->\n      <div class=\"morsels-heading\"><span>What</span></div>\n      <div class=\"morsels-bodies\">\n        <!--\n          The text under the following element is sourced from\n          the \"body\" field, that follows the \"heading\" field above\n          in the original document.\n\n          Refer to the section on indexing configuration for more details.\n        -->\n        <div class=\"morsels-body\">\n          <!-- (the query here is \"foo bar\") -->\n          <span class=\"morsels-ellipsis\"></span>\n\n          <span> this is text before the first highlighted term </span>\n          <!-- **highlightRender** START  -->\n          <span class=\"morsels-highlight\"><span>foo</span></span>\n          <!-- **highlightRender** END -->\n          <span> this is some text after the first highlighted term</span>\n\n\n          <span class=\"morsels-ellipsis\"></span>\n\n\n          <span> this is text before the second highlighted term</span>\n          <!-- **highlightRender** START -->\n          <span class=\"morsels-highlight\"><span>bar</span></span>\n          <!-- **highlightRender** END -->\n          <span> this is some text after the second highlighted term<< /span>\n\n          <span class=\"morsels-ellipsis\"></span>\n        </div>\n      </div>\n    </a>\n    <!-- **headingBodyRender** END -->\n\n    <!--\n      **bodyOnlyRender** START\n      a body-only field match for the document\n      (no heading before it in the original document)\n    -->\n    <div class=\"morsels-body\">\n      <span class=\"morsels-ellipsis\"></span>\n      <span></span>\n      <!-- **highlightRender** START -->\n      <span class=\"morsels-highlight\"><span>foo</span></span>\n      <!-- **highlightRender** END -->\n      <span class=\"morsels-ellipsis\"></span>\n    </div>\n    <!-- **bodyOnlyRender** END -->\n  </a>\n</li>\n<!-- **listItemRender** END -->\n\n<!--\n    ... Repeat (another search result) ...\n\n    Note: an IntersectionObserver is attached to the\n    last such <li> element for infinite scrolling\n-->\n<li class=\"morsels-list-item\"></li>\n<!-- **resultsRender** END -->\n\n\n\n"],[3,"1-rendering-all-results"],[1,"1. Rendering All Results"],[0,"\nasync resultsRender(h, opts, config, results, query): Promise<HTMLElement[]>\n(flexible but not too well documented yet, and may be unstable)\nThis API renders the results for all document matches.\nSome examples use cases are:\n\nAltering the html output structure substantially (e.g. displaying results in a tabular form)\nCalling external API calls to retrieve additional info for generating result previews.\n\nFor this reason, this is also the only async API\n\n\n\nFor example, the default implementation does the following:\n\nCheck the config.fieldInfos if any of body / title / heading fields are stored by the indexer to generate result previews. (Skip to 3 if present)\nIf the document has the internal _relative_fp field and sourceFilesUrl is specified, retrieve the original document (html or json), and transform it into the same format as that generated by the indexer.\nTransform and highlight the field stores using the listItemRender set of APIs below.\n\nParameterDescription\nconfigThis is the indexing configuration object.\nresultsan array of Result objects\nquerya Query object\n\nYou may also refer to the default implementation here to get an idea of how to use the API.\n"],[3,"2-rendering-a-single-result"],[1,"2. Rendering a Single Result"],[0,"\nThe renderers under this key build up the default implementation of resultsRender, and are grouped under uiOptions.resultsRenderOpts (instead of uiOptions.XXX).\nIf overriding resultsRender above, the following options will be ignored.\nThese APIs are more suited for performing smaller modifications for the default use case, for example, displaying an additionally indexed field (e.g. an icon).\n\nlistItemRender(h, opts, fullLink, resultTitle, resultHeadingsAndTexts, fields): HTMLElement\nThis API renders the result for a single document match.\nParameterDescription\nfullLinkfull resource link of the document\nresultTitlethe first extracted title field of the document, if any\nresultHeadingsAndTextsAn array of string or HTMLElement intended to be used as the last parameter of h.This contains the highlighted heading-body pair matches, or body-only matches rendered from headingBodyRender and bodyOnlyRender further below.\nfieldsAll stored fields for the document, as positioned [fieldName, fieldValue] pairs. Useful if adding additional fields.\n\nThe following example shows the default implementation, and how to add an additional field, subtitle, to each result.\nconst subTitleField = fields.find(field => field[0] === 'subtitle');\n\nconst linkEl = h(\n  'a', { class: 'morsels-link' },\n  h('div', { class: 'morsels-title' }, title,\n    h('div', { class: 'morsels-subtitle' }, (subTitleField && subTitleField[1]) || '')\n  ),\n  ...bodies\n);\n\nif (fullLink) {\n  linkEl.setAttribute('href', fullLink);\n}\n\nreturn h(\n  'li', { class: 'morsels-list-item' },\n  linkEl,\n);\n\n"],[3,"21-listitemrender-supporting-apis"],[1,"2.1 listItemRender supporting APIs"],[0,"\nThe remaining 3 APIs below are supplementary to listItemRender, and are responsible for generating the resultTitle and resultHeadingsAndTexts parameters for listItemRender.\nRefer to the html snippet above and annotations below to understand which APIs are responsible for which parts.\ninterface SearchUiRenderOptions {\n  // Renders a \"heading\" field,\n  // along with the highlighted \"body\" fields that follow it (in document order)\n  headingBodyRender?: (\n    h: CreateElement,\n\n    // Heading text\n    heading: string,    \n\n    // The highlighted elements under .morsels-body. Intended to be used with the 'h' function.\n    bodyHighlights: (HTMLElement | string)[], \n\n    // Url of the document + The matching heading's id, if any\n    href?: string                             \n  ) => HTMLElement,\n\n\n  // Renders highlighted \"body\" fields without a heading preceding it\n  bodyOnlyRender?: (\n    h: CreateElement,\n\n    // The highlighted elements under .morsels-body. Intended to be used with the 'h' function.\n    bodyHighlights: (HTMLElement | string)[], \n  ) => HTMLElement,\n\n\n  highlightRender?: (\n    h: CreateElement,\n\n    // matched term\n    matchedPart: string,                      \n  ) => HTMLElement,\n}\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"getting_started_others.html"],[2,"Others - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"other-use-cases"],[1,"Other Use Cases"],[0,"\nSince its indexer is essentially just a CLI tool, morsels could in-theory be used almost anywhere (e.g. other static site generators) easily without a custom wrapper implementation (such as the Mdbook plugin).\nFor example, to deploy another static site generator to gh-pages using github actions, simply chain the morsels tool on top of the static site generator output:\nname: docs\non:\n  push:\n    branches:\n      - docs\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build documentation\n        run: # <insert your favourite ssg build command>\n      - name: Install Morsels\n        run: cargo install morsels_indexer # or, using the binary release\n      - name: Run Morsels\n        run: morsels <docs_build_folder> <docs_build_folder/morsels_output> -c <morsels_config_path>\n      - name: Deploy to github pages 🚀\n        uses: JamesIves/github-pages-deploy-action@4.1.5\n        with:\n          branch: gh-pages\n          folder: <docs_build_folder>\n\n"],[3,"custom-data-formats-non-html"],[1,"Custom Data Formats (non .html)"],[0,"\nSome use cases may not always have .html files readily available (e.g. pure client-side rendered ones) or in the right format.\nIn such cases, morsels also supports .json and .csv files, which is covered in greater detail later under indexing configuration.\nAnother simpler (but likely slow) alternative you could consider specifically for client-side rendered projects is to display the page in a headless browser, then index said html file.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"introduction.html"],[2,"Introduction - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"introduction"],[1,"Introduction"],[0,"\nMorsels is a client-side search library and user-interface that depends on a pre-built index generated by its cli build tool.\nThe difference with other search libraries like lunr.js is that this tool is focused on providing more scalability (but not infinitely so) using a pre-built index split into many small files. (versus other tools that provide this in a monolithic format)\n"],[3,"what"],[1,"What"],[0,"\nThe core idea of this tool is to split up a monolithic postings list into many smaller files (hence the name “Morsels”), organised by the indexed terms. Multiple index files are batched into the same file, keeping to 16383 bytes (configurable) as much as possible.\nOn the client, supporting information (e.g. dictionary, document lengths, field weights) is retrieved on startup, which is usually less than a few MB even for fairly large collections.\nThe index files containing searched terms will be requested only on-demand from a static file server.\n"],[3,"limits"],[1,"Limits"],[0,"\nThe practicality / scalability of this tool is mainly bound by the following 2 factors as such.\n"],[3,"size-of-the-largest-index-chunk-retrieved"],[1,"Size of the Largest Index Chunk Retrieved"],[0,"\nWhile the index is split into many chunks, some chunks may exceed the “split size” of 16383 bytes at times. This occurs when the chunk contains a very common term (e.g. a stop word like “the”). While the information for this term could be further split into multiple chunks, all such chunks will still inevitably have to be retrieved when the term is searched, diminishing its benefit.\nCertain indexing options like removing positions and pre-caching larger chunks on startup are available to alleviate this to some extent, though not infinitely.\n"],[3,"estimations"],[1,"Estimations"],[0,"\nAs a rough estimate from testing, this library should be able to handle collections < 800mb with positional indexing. Without it, the index shrinks 3-4 fold, making it potentially possible to index collections ~2gb in size.\n"],[3,"hardware-capabilities"],[1,"Hardware Capabilities"],[0,"\nDevice capabilities is also another concern (performance when ranking and populating results), although in practice, you should be hitting limits due to the first factor (network transfer times) long before experiencing issues with this.\n"],[3,"use-cases"],[1,"Use Cases"],[0,"\nIn short, this tool is tailored for a very specific audience:\n\nYou have a fairly large collection of html, csv, or json (only these are supported for now) files that cannot be monolithically retrieved feasibly\nYou don’t want or can’t run a search server / search Saas (eg. Algolia Docsearch)\nYou don’t want the user downloading and loading a gigantic > 50mb index, blowing up memory usage everytime they visit your site.\nYou want a complete, end-to-end and customisable search UI and file indexing solution.\n\n\n⚠️ \nIt is not possible to use morsels for client-side indexing + searching as such since the indexer is a cli tool.\nIf this is the use case, consider other lighter-weight libraries like lunr.js that already fit well.\n\n"],[3,"libraries"],[1,"Libraries"],[0,"\nThis project is made up of 3 crates and 2 packages, which may be referred to in the subsequent sections of the documentation.\n"],[3,"rust-crates"],[1,"Rust crates:"],[0,"\n\nmorsels_indexer: the cli tool providing indexing functionalities for several file formats\nmorsels_search: internal rust wasm crate, used by the @morsels/search-lib package below.\nmorsels_common: internal library containing common functionalities for the above 2 crates.\n\n"],[3,"npm-packages"],[1,"Npm packages:"],[0,"\n\n@morsels/search-ui: interfaces with @morsels/search-lib to provide basic search UI functionalities (e.g. SERP generation)\n@morsels/search-lib: a small companion library to morsels_search for interfacing with the wasm crate. This may be used without the @morsels/search-ui package in the future. For now, it only serves to separate some concerns from the UI package.\n@morsels/lang-XX: internal tokenizer packages for different languages generated by wasm pack.\n\n\n\n\n                    \n\n                    \n                        \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"getting_started.html"],[2,"Getting Started - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"getting-started"],[1,"Getting Started"],[0,"\nThis page assumes the following use case:\n\nYou have some .html files you want to index\nThese .html files are served in a static file server, and are accessible by the search-ui to generate result previews\nYou have a input element to attach a search dropdown to\n\nFor mobile devices, a fullscreen UI will show instead when this input element is focused.\nNote that this documentation is using an alternative UI mode (try the search function!), which is covered later under search configuration.\nTo preview the default mode, head on over to the mdbook page here, and click on the auto button.\n\n\n\nIf you require more, have a look through here first, then jump into the subsequent configuration pages to learn more.\n"],[3,"installing-the-indexer"],[1,"Installing the indexer"],[0,"\nIf you have the rust / cargo toolchain setup, simply run cargo install morsels_indexer.\nThe cli binaries are also available here if preferred.\n"],[3,"running-the-indexer"],[1,"Running the indexer"],[0,"\nRun the executable as such, replacing <source-folder-path> with the relative or absolute folder path of your source html files, and <output-folder-path> with your desired index output folder.\nmorsels <source-folder-path> <output-folder-path>\n\n"],[3,"other-cli-options"],[1,"Other Cli Options"],[0,"\nWhile optional, if it is your first time running the tool, you can run the above command with the --init or -i flag, then run it again without this flag.\nThis flag outputs the default morsels_config.json that can be used to configure the indexer later on.\nYou may also change the config file location (relative to the source-folder-path) using the -c <config-file-path> option.\nAll existing contents in the output folder are also removed when running a full index. Specify the --preserve-output-folder option to avoid this.\n"],[3,"installing-the-search-library--ui"],[1,"Installing the search library / UI"],[0,"\n"],[3,"installation-via-cdn"],[1,"Installation via CDN"],[0,"\n<!-- Replace \"v0.0.2\" as appropriate -->\n\n<!--  Search UI package script, which bundles the search library together with it -->\n<script src=\"https://cdn.jsdelivr.net/gh/ang-zeyu/morsels@v0.0.2/packages/search-ui/dist/search-ui.bundle.js\"></script>\n<!-- Search UI css, this provides very basic styling for the search dropdown, and can be omitted if desired -->\n<script src=\"https://cdn.jsdelivr.net/gh/ang-zeyu/morsels@v0.0.2/packages/search-ui/dist/search-ui.css\"></script>\n\n\n⚠️ Ensure the versions here tally with the indexer version installed.\n\n"],[3,"hosting-the-files-locally"],[1,"Hosting the Files Locally"],[0,"\nIf you wish to serve the files locally instead, you can find the latest versions in this folder, or in the release packages here.\nThe following files will be present in each release:\n\nsearch-ui.bundle.js\nsearch-ui.css\nsearch.worker.bundle.js\nMultiple (as many supported languages / tokenizers as there are):\n\nwasm.lang-latin-index-js.bundle\nan accompanying wasm binary\n\n\n\nNote that search.worker.bundle.js and the wasm files are expected to be accessible in the same folder relative to the linked search-ui.bundle.js.\n"],[3,"installation-via-bundlers"],[1,"Installation via Bundlers"],[0,"\nAs morsels consists of a javascript (typescript) and rust portion enabled by WebAssembly, including it into your project’s bundling / build process is likely infeasible, as rust / wasm compilation takes a lot of time (and requires extra toolchains).\nInstead, use the file copying functionalities of your bundler to copy morsels’ assets into the appropriate output directories.\nFor example, using the CopyWebpackPlugin, the following (untested) setup should be all you need:\n// Under plugins configuration\nnew CopyPlugin({\n  patterns: [\n    {\n      from: path.join(require.resolve('@morsels/search-ui'), 'dist'),\n      to: \"dest\" // change as appropriate\n    },\n  ],\n})\n\n<!-- Replace links as appropriate -->\n<script src=\".../search-ui.bundle.js\"></script>\n<script src=\".../search-ui.css\"></script>\n\n"],[3,"initialisation-call"],[1,"Initialisation Call"],[0,"\nOnce you have loaded the bundles, to initialise morsels, simply call the initMorsels function.\nThis requires an input element with an id of morsels-search to be present in the page by default, which can be configured differently via uiOptions.input.\ninitMorsels({\n  searcherOptions: {\n    // Output folder url specified as the second parameter in the cli command\n    url: 'http://192.168.10.132:3000/output/',\n  },\n  uiOptions: {\n    // Input / source folder url, specified as the first parameter in the cli command\n    sourceFilesUrl: 'http://192.168.10.132:3000/source/',\n  }\n});\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"404.html"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        "],[3,"document-not-found-404"],[1,"Document not found (404)"],[0,"\nThis URL is invalid, sorry. Please use the navigation bar or search to continue.\n\n                    \n\n                    \n                        \n\n\n                        \n                    \n                \n            \n\n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"dynamic_indexing.html"],[2,"Dynamic Indexing - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"dynamic-indexing"],[1,"Dynamic Indexing"],[0,"\nDynamic, or incremental indexing is also supported by the indexer cli tool.\nDetecting deleted, changed, or added files is done by storing an internal file path -> last modified timestamp metadata map.\nTo enable it, simply pass the --dynamic or -d option when running the indexer.\n"],[3,"how-it-works"],[1,"How it Works"],[0,"\nAs the core idea of Morsels is to split up the index into many tiny parts (and not more than necessary), the dynamic indexing feature works by “patching” only the files which were updated during the current run. This means that at search time, the same amount of index files are retrieved and searched through as before, to reduce the number of network requests.\nThis is in contrast to a more traditional “segment” based approach you might find in search servers, whereby each dynamic indexing run generates an entirely separate “segment”, and segments are merged together at runtime (during search). While this makes sense for traditional search tools, it may unfortunately generate too many network requests for index files and search overhead from merging files, something Morsels is trying to minimise.\n"],[3,"caveats"],[1,"Caveats"],[0,"\nThere are certain caveats to note when using this option. Whenever possible, try to run a full reindex of the documents, utilising dynamic indexing only when indexing speed is of concern – for example, updating the index immediately when writing this documentation (on saving a file).\nNote however, that the following circumstances will forcibly trigger a full reindex:\n\nIf the output folder path does not contain any files indexed by morsels\nIt contains files indexed by a different version of morsels\nThe configuration file (morsels_config.json) was changed in any way\n\n"],[3,"collection-statistics"],[1,"Collection Statistics"],[0,"\nCollection statistics will tend to drift off when deleting documents (which also entails updating documents). This is because such documents may contain terms that were not encountered during the current run of dynamic indexing (from added / updated documents). Detecting such terms is difficult, as there is no guarantee the deleted documents are available anymore. The alternative would be to store such information in a non-inverted index, but that again takes up extra space =(.\nAs such, the information for these terms may not be “patched”. As a result, you may notice some slight drifting in the relative ranking of documents returned after some number of dynamic indexing runs.\n"],[3,"file-metadata"],[1,"File Metadata"],[0,"\nThe change detection currently relies on the last modified time in file metadata. This may not be available or accurate on all systems, or guaranteed by the tools that generate the files Morsels indexes.\nIf file metadata is unavailable for any given file, the file would always be re-indexed.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"tradeoffs.html"],[2,"Tradeoffs - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"tradeoffs"],[1,"Tradeoffs"],[0,"\nWhen configuring morsels, there are several tradeoffs you need to keep in mind, which varies greatly on depending on your collection and use case. \nThis chapter outlines the possible tradeoffs you can make and summarises the relevant options you would want to keep in mind.\n"],[3,"possible-tradeoffs"],[1,"Possible Tradeoffs"],[0,"\nThe possible tradeoffs you can make are marked with ✔️. Those that are likely impossible are marked ❌, or in other words, you need a search server / SaaS for these options. Some options that are possible but are relatively undesirable (for which better equivalent options exist) are marked 😩.\nLatency is labelled in terms of RTT (round trip time), the maximum of which is 3.\nScalability and file bloat are inevitably labelled more subjectively.\nAlso note that the labelled RTT times are maximums. (namely, if files are served from cache instead)\nFactorRTT=0RTT=1RTT=2RTT=3\nFair Scalability,Little File bloat✔️😩😩😩\nFair Scalability,Moderate File bloat😩😩😩😩\nFair Scalability,Heavy File bloat😩😩😩😩\nGood Scalability,Little File bloat❌❌✔️😩\nGood Scalability,Moderate File bloat❌✔️😩😩\nGood Scalability,Heavy File bloat❌✔️😩😩\nExcellent Scalability,Little File bloat❌❌❌✔️\nExcellent Scalability,Moderate File bloat❌❌❌✔️\nExcellent Scalability,Heavy File bloat❌❌✔️😩\nBeyond Excellent Scalability(consider running asearch server / SaaS)❌❌❌❌\n\n\nSome roughly equivalent / nearby options are still marked ✔️ (vs 😩), since the labels are subjective.\n\nOf particular note, the only possible option under RTT=0 is equivalent to using some other existing client side search library and generating a monolithic prebuilt index.\nYou may still want to use morsels since it packages a search UI, or, if you prefer the simplicity of a cli indexer tool (e.g. for CI).\n"],[3,"configuration"],[1,"Configuration"],[0,"\n\nThis section assumes you have read chapters 4 (barring 4.1) and 5, the options will be discussed in briefer detail here.\n\nThe relevant options you will want to keep in mind are:\n\nSearch Configuration: \n\n⭐⭐ The method of result preview generation\ncacheAllFieldStores\n\n\nIndexing Configuration:\n\nwhat fields are stored (do_store)\nfield_store_block_size\npl_limit\npl_cache_threshold\nnum_stores_per_dir\n\n\n\nThe following sections discusses some combinations of options that generate the outputs in the table above.\n"],[3,"1-rtt0-fair-scalability-little-file-bloat"],[1,"1. RTT=0, Fair Scalability, Little File Bloat"],[0,"\nTo achieve this result, you will need to ensure everything that is potentially needed is retrieved up front.\n\nSet pl_limit to an arbitrarily large number. This compresses the inverted index into one or a few files.\nEnsure pl_cache_threshold is set to a very low number (or at least smaller than the inverted index file size), so that the postings list are loaded up front and cached in memory.\nYou would also want to set field_store_block_size to a fairly high number, and correspondingly set cacheAllFieldStores to true. This allows morsels to load the few field stores during initilisation and persistently cache them.\n\n\n⭐ This is what’s being used by this documentation, since it is fairly small.Nevertheless, RTT=1/2 are still very acceptable settings under good network conditions. RTT=3 may be slightly slow (~600ms assuming decent network conditions), but still quite acceptable depending on your use case since it reduces file bloat.\nComing Soon: More repo / test github pages for demonstrating the other settings\n\n"],[3,"2-rtt12-good-scalability-moderate--heavy-file-bloat"],[1,"2. RTT=1/2, Good Scalability, Moderate / Heavy File Bloat"],[0,"\nThe tradeoffs here a a little more complex; The impacts of various options are discussed under the 2 main methods of result preview generation.\n"],[3,"21-generating-result-previews-from-source-files"],[1,"2.1. Generating Result Previews from Source Files"],[0,"\nWhile generating result previews from source files greatly reduces file bloat, it does mean that an extra round (RTT) of network requests has to be made to retrieve said source files.\nTherefore, the tradeoff here is between file bloat and RTT.\nHowever, it is also more feasible with this option to remove a round of network requests by compressing and caching all field stores up front.\nThis is because in this option, field stores only store the relative file path from which to retrieve the source files, and are therefore fairly small.\nFor example, assuming each link takes an average of 25 bytes to encode (including json fluff), and 3MB (ungzipped) is your “comfort zone”, you can store up to 120000 document links in a single, cached field store!\nThe relevant options are pl_cache_threshold and field_store_block_size (configure similar to the earlier RTT=0 case).\n\n⭐ This is the default settings! (RTT=2, Little file bloat, Good scalability)\n\n"],[3,"22-generating-result-previews-from-field-stores"],[1,"2.2. Generating Result Previews from Field Stores"],[0,"\n(RTT=1, Moderate-Heavy file bloat, Good scalability)\nIt is also possible to achieve another trade off by using this method of preview generation.\nAs mentioned, generating result previews directly from field stores (making sure to specify do_store on the appropriate fields) avoids the extra mentioned round of network requests to retrieve said source files.\nMoreover, for moderately sized collections, we may surmise that the size of the index is often far smaller than the size of field stores.\nThe idea here therefore is to cache the index (using pl_limit, pl_cache_threshold) and fragment the field stores (field_store_block_size), therefore reducing another RTT.\n"],[3,"3-excellent-scalability"],[1,"3. Excellent Scalability"],[0,"\nThe settings here follow from the section directly above, disregarding the compromises. That is,\n"],[3,"31-generating-result-previews-from-source-files"],[1,"3.1. Generating Result Previews from Source Files"],[0,"\n(RTT=3, Excellent Scalability, Little-Moderate File Bloat)\nThe RTT compromise is accepted as is, without performing the caching mentioned in section 2.1.\nThis is because as the collection grows, we cannot guarantee that document links are at a size that can be feasibly and monolithically cached.\n"],[3,"32-generating-result-previews-from-field-stores"],[1,"3.2. Generating Result Previews from Field Stores"],[0,"\n(RTT=2, Excellent Scalability, Heavy File Bloat)\nPer section 2.2, one simply needs to avoid the assumption that the index can be cached.\nScalability is then ensured here by fragmenting both the index (using pl_limit) and field stores (field_store_block_size).\n"],[3,"other-options"],[1,"Other Options"],[0,"\nThere are 2 other options worth highlighting that can help reduce the index size. \n\nignore_stop_words\nwith_positions\n\nSince the default settings (RTT=2, Little file bloat, Good scalability) fragments the index, stop word removal at indexing time is not done.\nPositional information also takes up a considerable proportion of the index size.\nIf you are willing to forgo some features (e.g. phrase queries, boolean queries of stop words) in return for reducing the index size, you can enable / disable these options as appropriate.\nThis would be especially useful if configuring for a monolithic index (RTT=0, Fair Scalability, Little File Bloat), as it reduces the index size to be retrieved up front.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"contributing.html"],[2,"Contributing - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"contributing"],[1,"Contributing"],[0,"\nContributions of any form (code, documentation, bug reports) are highly welcome.\nTo report a bug, simply head on over here.\nThe subsequent sections details information only for getting your development environment setup.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"developers_developing.html"],[2,"Developing - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"developing"],[1,"Developing"],[0,"\n"],[3,"building-and-running-the-development-site"],[1,"Building and Running the Development Site"],[0,"\nOnce you have you test files placed in the correct folder per the previous chapter, run the npm run index1 script to index your content, then run npm run devServer1 to serve up the indexer’s output on port 3000.\nFinally, use the npm run dev script to open the development site on port 8080. This script runs the webpack build process, which in turn triggers the WebAssembly build process as well through the wasm-pack webpack plugin.\nThere are also npm run index2 / devServer2 scripts available. An interactive script may be added in the future, but for now 2 should suffice (1 to test a smaller site, 1 to test a very large collection).\n"],[3,"working-with-the-mdbook-morsels-plugin--documentation-edits"],[1,"Working With the mdbook-morsels Plugin / Documentation Edits"],[0,"\nSimply run npm run devDocsFull to get serve up the documentation on port 8000!\nThis script runs the following subscripts:\n\n\nnpm run installIndexer, this builds and install the indexer command-line tool to your PATH (mdbook plugins are basically separate executables, operating on stdin / stdout).\n\n\nnpm run buildSearch, which builds the search-ui bundles, to ensure the documentation is being developed on the latest changes.\n\n\nnpm run installMdbook, which builds and installs the mdbook plugin executable.\n\n\nnpm run devDocs, which serves up the documentation at port 8000. The commands are segregated to reduce iterative build times if you only need to execute the last few script(s).\n\n\nYou can also run the individual commands separately to reduce iterative build times if you only need to execute the last few script(s).\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"search_features.html"],[2,"Search Features - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"search-features"],[1,"Search Features"],[0,"\nThis page outlines the available search features common to both @morsels/search-ui and @morsels/search-lib.\n"],[3,"boolean-operators-parentheses"],[1,"Boolean Operators, Parentheses"],[0,"\nAND and NOT operators are supported.\nOR operators are not supported, but is implicitly left to the tokenizer (see below for an example).\nParentheses (...) can be used to group expressions together.\nlorem ipsum                 - documents containing either lorem or ipsum.\nlorem AND ipsum             - documents with both \"lorem\" and \"ipsum\"\nlorem AND NOT ipsum         - documents with \"lorem\" but not \"ipsum\"\nlorem AND NOT (ipsum dolor) - documents with \"lorem\" but not (\"ipsum\" OR \"dolor\")\n\n"],[3,"phrase-queries"],[1,"Phrase Queries"],[0,"\nPhrase queries are also supported. However, these will not work if the withPositions index feature is disabled.\n\"lorem ipsum\" - documents containing \"lorem\" and \"ipsum\" appearing one after the other\n\n"],[3,"field-search"],[1,"Field Search"],[0,"\nField queries are supported via the following syntax field_name:, following the same syntax rules as the NOT operator.\ntitle:lorem             - documents containing \"lorem\" in the field \"title\"\ntitle:(lorem AND ipsum) - documents with both \"lorem\" and \"ipsum\" in the\n                          field \"title\" only\nlorem AND title:ipsum   - documents with \"ipsum\" in the title and \"lorem\" in any field\n\n"],[3,"escaping-search-operators"],[1,"Escaping Search Operators"],[0,"\nAll search operators can also be escaped using the \\ character like such:\nlorem\\ AND ipsum            - interpreted literally as \"lorem AND ipsum\"\n\\NOT lorem                  - interpreted literally as \"NOT lorem\"\n\\(not a parentheses group\\)\n\\\"not a phrase query\\\"\n\"phrase query with qu\\\"ote inside\"\ntitle\\:lorem\n\n"],[3,"other-details"],[1,"Other Details"],[0,"\nThis section briefly details some non user-facing features.\n"],[3,"webworker-built-in"],[1,"WebWorker Built-in"],[0,"\nMost of the search library operates on a WebWorker where it matters (e.g. setup), so you don’t have to worry about blocking the UI thread.\nPopulation of stored document fields is however done on the main thread, as copying large documents to-and-fro WebWorker interfaces incurs substantial overhead.\nSearch UI (@morsels/search-ui) related functionalities, for example SERP generation, is also done on the main thread.\nOne of the main reasons is that there is simply no way of parsing html (the original html document can be used as an alternative to storing document fields) faster than the implementations provided by the browser.\n"],[3,"ranking-specifics"],[1,"Ranking Specifics"],[0,"\nTop-level disjunctive expressions (e.g. lorem ipsum) are ranked using the BM25 model.\nPure free-text queries (e.g. “lorem ipsum”) also use the WAND algorithm to improve query speed, although, the benefits should be marginal for most cases.\nQuery term proximity ranking is also supported and enabled by default - results are scaled in an inverse logarithmic manner according to how close disjunctive search expressions are to one another.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"search_configuration.html"],[2,"Search UI Configuration - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"search-configuration"],[1,"Search Configuration"],[0,"\nAll search time related options can be provided through the initMorsels function, exposed by @morsels/search-ui.\nThere are 2 categories of options, the first being related to the search library (@morsels/search-lib), and the second the user interface (@morsels/search-ui).\n"],[3,"forenote-on-mobile-device-detection"],[1,"Forenote on Mobile Device Detection"],[0,"\nSeveral options in both the search library and UI are by default tuned based on whether the client is a mobile device.\nSome examples of tuned settings for mobile devices:\n\nQuery term proximity ranking is disabled\nWhether to use the fullscreen version (more later) of the user interface instead\n\nThe check is done through a simple window.matchMedia('only screen and (max-width: 1024px)').matches query at initialisation time, which may not be robust enough for your use case.\nAn override may be provided through the isMobileDevice option shown below, which is simply a function returning a boolean.\ninitMorsels({\n    isMobileDevice: () => true,\n})\n\n\n"],[3,"search-ui-options"],[1,"Search UI Options"],[0,"\nSearch UI options are organised under the uiOptions key:\ninitMorsels({\n    uiOptions: {\n        // ... options go here ...\n    }\n})\n\nFor brevity, this page covers only a subset of the most important options.\nThe subsequent section on renderers provides a more advanced API to customise the html output. If you have a configuration use case that cannot be achieved without these APIs, and you think should be included as a simpler configuration option here, feel free to raise a feature request!\n"],[3,"input-element"],[1,"Input Element"],[0,"\nOptionDefault ValueDescription\ninput'morsels-search'id of the input element or a html element reference\ninputDebounce100debounce time of keystrokes to the input element\npreprocessQuery(q) => qany function for preprocessing the query. Can be used to add a field filter for example.\n\nThe input option is the most important option, and required in most use cases. Its purpose varies depending on the ui mode specified below.\n"],[3,"ui-mode"],[1,"UI Mode"],[0,"\nmode = 'auto'\nThe search UI provides 4 main different behaviours.\nTo try the different modes out, head on over to the mdbook plugin page, which provides various buttons for switching the modes in this documentation.\nModeDescription\n\"auto\"This option is the default, and combines the dropdown and fullscreen options below. If a mobile device is detected as per the earlier section, the fullscreen mode is used. Otherwise, the dropdown mode is used.A debounced window resize handler is also attached that reruns the mobile device check whenever the window is resized.\n\"dropdown\"This wraps the specified input element with a root container. Search results are displayed using an additional container attached to this root container.\n\"fullscreen\"This option creates a completely distinct root container with its own input element, and attaches it to the <body> element. Under the default stylesheet, the user interface is fullscreen for devices satisfying max-width: 1025px, and takes up roughly 50% - 75% of the screen otherwise.If the input element is specified, the root container is attached whenever the input is focused.Alternatively, one may use the showFullscreen and hideFullscreen functions returned by the initMorsels function to toggle the UI. This is also the only use case where you would not need to specify the input element.\n\"target\"This option is the most flexible, and is used by the mdbook plugin and this documentation by default. The input element must be specified, but only for attaching keystroke listeners. No dom manipulation is performed unlike the dropdown or auto modes.The search results are output to a custom target element of choice.\n\n"],[3,"ui-mode-specific-options"],[1,"UI Mode Specific Options"],[0,"\nThere are also several options specific to each UI. Note that dropdown and fullscreen options are both applicable to the auto mode.\nModeOptionDefaultDescription\ndropdowndropdownAlignment'bottom-end''bottom-start' or 'bottom-end'. Which side of the input element to align the dropdown results container and dropdown seperator against. The alignment of the dropdown container will be automatically flipped horizontally to ensure the most optimal size (see floating-ui ’s docs for a demonstration).\nfullscreenfullscreenContainer<body> elementId of the element, or an element reference to attach the separate root container to.\ntargettarget-Id of the element, or an element reference to attach results to. Required if using mode='target'.\n\n"],[3,"manually-showing--hiding-the-fullscreen-ui"],[1,"Manually Showing / Hiding the Fullscreen UI"],[0,"\nconst { showFullscreen, hideFullscreen } = initMorsels(/* ... */);\n\nThe default behaviour of showing the fullscreen search UI when focusing the input may be insufficient, for example to show the UI when clicking a “search icon”.\nYou may call the showFullscreen() function returned by the initMorsels call in such a case for manual control. Correspondingly, the hideFullscreen() method hides the fullscreen interface, although, this shouldn’t be needed since a close button (or by pressing esc) is available by default.\nThese functions can also be used under mode='auto' if desired.\n"],[3,"options-for-generating-result-previews"],[1,"Options for Generating Result Previews"],[0,"\nThere are 3 ways to generate result previews, the first of the below being the default.\nUnless you have modified the default result renderer (covered in the next page on renderers), morsels requires at least one of the body / heading / title fields. This is configured by default, and covered in the next section on indexing configuration in more detail.\n"],[3,"default-rendering-output--purpose"],[1,"Default Rendering Output / Purpose"],[0,"\nThe default result generation assumes the simple but common use case of linking to a source document (<a /> tag). \nTherefore, source documents are assumed to be available. To generate alternative outputs (e.g. buttons, perform some action), you will need to use option 3 below.\n"],[3,"1-from-source-documents-default"],[1,"1. From Source Documents (default)"],[0,"\nsourceFilesUrl\nWhen option 2 below (field stores) is not configured or unavailable, morsels will attempt to fetch the source document from sourceFilesUrl adjoined with the relative file path of the document at the time of indexing. The source document is then reparsed, and its fields are extracted again in order to generate result previews.\nThe _relative_fp field is an internally generated field that can be stored during indexing, and retrieved during search time. The combination of the base url from which to retrieve these source files (sourceFilesUrl) and this field forms the full source document link, used for:\n\nAttaching a link to the source document in the generated result match\nRetrieving the source document\n\nNote that this option is only applicable for indexed html and json files at this time.\nAs csv files are often used to hold multiple documents (and can therefore get very large), it is unsuitable to be used as a source for search result previews. In this case, options 2 or 3 can be used.\n"],[3,"2-from-field-stores"],[1,"2. From Field Stores"],[0,"\nIf source documents are unavailable, morsels is able to generate result previews from its own json field stores generated at indexing time.\nIn order to specify what fields to store, take a look at the do_store option in this section of the indexing configuration page. To use this method of result preview generation for the default use case / result rendering behaviour, enable the do_store option for the relevant fields.\nYou may also wish to use this method even if source documents are available, if filesystem bloat isn’t too much of a concern. Apart from avoiding the additional http requests, the internal json field store comes packed in a format that is more performant to perform result preview generation on.\n"],[3,"3-alternative-rendering-outputs-advanced"],[1,"3. Alternative Rendering Outputs (advanced)"],[0,"\nIt is also possible to create your own result renderer to, for example:\n\nattach an event handler to call a function when a user clicks the result preview\nretrieve and generate result previews from some other API.\n\nNevertheless, the section “From Field Stores” above would still be relevant as it provides the basis for retrieving a document’s fields (e.g. a document id with which to call an API).\nThis is covered in more detail in the next page.\n"],[3,"results-per-page"],[1,"Results Per Page"],[0,"\nresultsPerPage = 8\nIn all UI modes, an infinite scrolling intersection observer is attached to the last search result, if any. When triggered, search result previews are fetched and/or generated for a number of these results only.\nLowering this can have a noticeable performance improvement on result generation, as more .html / .json files have to be retrieved on-the-fly, parsed, and processed. This is especially true if using option 1 above.\n\n"],[3,"search-library-options"],[1,"Search Library Options"],[0,"\nThe options for the search library are rather brief, and can be summarised in this snippet:\ninitMorsels({\n    // Options belonging to @morsels/search-lib, the search library package\n    searcherOptions: {\n        // Base url of output directory that the cli tool generated\n        url: 'http://192.168.10.132:3000/output/',\n        \n        // Maximum number of terms for query term expansion\n        numberOfExpandedTerms: 3,\n        \n        // Override for using query term proximity ranking or not.\n        // Disabled for mobile devices by default\n        useQueryTermProximity: true,\n\n        // Whether to retrieve all field stores on initialisation\n        // (see chapter \"Tradeoffs\" for more details)\n        cacheAllFieldStores: true,\n    },\n});\n\n"],[3,"automatic-term-expansion"],[1,"Automatic Term Expansion"],[0,"\nnumberOfExpandedTerms\nBy default, stemming is turned off in the language modules. This does mean a bigger dictionary (but not that much anyway), and lower recall, but much more precise searches.\nTo provide a compromise for recall, query terms that are similar to the searched term are added to the query, although with a lower weight.\nFor both of the language modules available currently, this is only applied for the last query term, and if the query string does not end with a whitespace. An implicit wildcard (suffix) search is performed on this term. (quite similar to Algolia Docsearch’s behaviour)\n"],[3,"term-proximity-ranking"],[1,"Term Proximity Ranking"],[0,"\nuseQueryTermProximity\nIf positions are indexed, document scores are also scaled by how close query expressions or terms are to each other.\nThis may be costly for mobile devices however, and is disabled by default in such cases.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"indexing_configuration.html"],[2,"Indexing Configuration - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"indexer-configuration"],[1,"Indexer Configuration"],[0,"\nAll indexer configurations are sourced from a json file. By default, the cli tool looks for morsels_config.json in the source folder (first argument specified in the command).\nYou can run the cli command with the --init option to initialise the default configuration file in the source folder.\n"],[3,"fields_config"],[1,"fields_config"],[0,"\nThe first step to indexing any documents is defining the field configurations.\nThe default configurations are as follows, already setup for interfacing with the @morsels/search-ui package.\n{\n  \"fields_config\": {\n    \"cache_all_field_stores\": false,\n    \"field_store_block_size\": 250,\n    \"fields\": [\n      {\n        \"name\": \"title\",\n        \"do_store\": false,\n        \"weight\": 0.2,\n        \"k\": 1.2,\n        \"b\": 0.25\n      },\n      {\n        \"name\": \"heading\",\n        \"do_store\": false,\n        \"weight\": 0.3,\n        \"k\": 1.2,\n        \"b\": 0.3\n      },\n      {\n        \"name\": \"body\",\n        \"do_store\": false,\n        \"weight\": 0.5,\n        \"k\": 1.2,\n        \"b\": 0.75\n      },\n      {\n        \"name\": \"headingLink\",\n        \"do_store\": false,\n        \"weight\": 0.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      },\n      // Internal, hardcoded field sourced from the\n      // relative file path of the file from the root directory\n      //\n      // Required for the default search ui preview generation methods\n      // (see \"Generating Result Previews\" under search configuration)\n      //\n      // Nonetheless, if omitted, the field will not be stored.\n      {\n        \"name\": \"_relative_fp\",\n        \"do_store\": true,\n        \"weight\": 0.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      }\n    ]\n  }\n}\n\nfield_store_block_size and do_store\nMorsels stores fields that have do_store: true specified in the field configuration into a json file in the output folder.\nAt search time, the fields saved in this manner from the json files are retrieved as-is.\nThe field_store_block_size parameter controls how many documents to store in one such json file. Batching multiple files together if the fields stored are small can lead to less files and better browser caching.\n\n⚠️ Ensure field_store_block_size is a clean multiple or divisor of the num_docs_per_block parameter elaborated further below.\nThis is a rather arbitiary limitation chosen to reduce the field store indexing scheme complexity,\nbut should work well enough for most use cases.\n\ncache_all_field_stores\nThis is the same as the configuration option under search configuration.\nIf both are specified, the value specified in the initMorsels call will take priority.\nAll fields specified with do_store=true would be cached up front on initialisation of the search library.\nIts usage alongside other options is discussed in more detail under the chapter Tradeoffs.\nweight\nThis parameter simply specifies the weight the field should have during scoring.\nSpecifying 0.0 will result in the field not being indexed (although, it can still be stored for retrieval using do_store).\nk & b\nThese are Okapi BM25 model parameters. The following article provides a good overview on how to configure these, although, the defaults should serve sufficiently.\n\ntype (WIP)\nThe only available types are string and u32.\nThis only affects how the fields are stored when the do_store parameter is specified (but not the indexing process).\nstring fields are stored in the manner illustrated above.\nu32 fields however are stored monolithically in a single file, for the purpose of fast random access.\nMoreover, sorting (also WIP) operations are only supported on u32 fields.\n\n"],[3,"special-fields"],[1,"Special Fields"],[0,"\n_relative_fp\nThis is a “hardcoded” field generated by the indexer, in that its value is fixed as the relative file path from your source folder path to the file.\nIt is included in the default configuration to allow @morsels/search-ui to retrieve the source file for result preview generation, and to link to the document itself (via an <a></a> tag). You may refer back to this section for more details.\nIf this is removed, this field simply won’t be indexed nor stored.\n"],[3,"lang_config"],[1,"lang_config"],[0,"\nThe snippet below shows the default values for language configuration. The key controlling the main tokenizer module to use is the lang key, while the options key supplies tokenization options unique to each module.\nThese options are also applied to @morsels/search-ui, which sources this information from the index output directory as specified in the initMorsels call.\n{\n  \"lang_config\": {\n    \"lang\": \"latin\",\n    \"options\": null\n  }\n}\n\n"],[3,"forenote-on-stop-words"],[1,"Forenote on Stop Words"],[0,"\nA slightly different approach with stop words is taken by default in that stop words are only filtered at query time for certain types of queries (currently this is for free-text queries with more than two terms).\nThis is because splitting up the index means that we are already able to put each of such commonly occuring words into one file, so, information for stop words is never requested unless necessary:\n\nFor processing phrase queries (eg. \"for tomorrow\")\nBoolean queries (eg. if AND forecast AND sunny)\nOne or two term free text queries containing stop words only. This is an unlikely use case, but it is nice having some results show up than none.\n\nNevertheless, all tokenizers also support forcibly removing stop words using the ignore_stop_words option, should you wish to keep the index size down (discussed again under chapter on “Tradeoffs”).\n"],[3,"ascii-tokenizer"],[1,"Ascii Tokenizer"],[0,"\nThe default tokenizer splits on sentences, then whitespaces to obtain tokens.\nAn asciiFoldingFilter is then applied to these tokens, followed by punctuation and non-word boundary removal.\n\"lang_config\": {\n  \"lang\": \"latin\",\n  \"options\": {\n    \"stop_words\": [\n      \"a\", \"an\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\", \"for\",\n      \"if\", \"in\", \"into\", \"is\", \"it\", \"no\", \"not\", \"of\", \"on\", \"or\",\n      \"such\", \"that\", \"the\", \"their\", \"then\", \"there\", \"these\",\n      \"they\", \"this\", \"to\", \"was\", \"will\", \"with\"\n    ],\n    \"ignore_stop_words\": false,\n\n    \"max_term_len\": 80\n  }\n}\n\n"],[3,"latin-tokenizer"],[1,"Latin Tokenizer"],[0,"\nThis is essentially the same as the ascii tokenizer, but adds a stemmer option.\n\"lang_config\": {\n  \"lang\": \"latin\",\n  \"options\": {\n    // ----------------------------------\n    // Ascii Tokenizer options also apply\n    // ...\n    // ----------------------------------\n\n    // Any of the languages here\n    // https://docs.rs/rust-stemmers/1.2.0/rust_stemmers/enum.Algorithm.html\n    // For example, \"english\"\n    \"stemmer\": \"english\"\n  }\n}\n\nIt is separated from the ascii tokenizer to reduce binary size (about ~220KB savings before gzip).\n"],[3,"chinese-tokenizer"],[1,"Chinese Tokenizer"],[0,"\nA basic chinese tokenizer based on jieba-rs is also available, although, it is still a heavy WIP at the moment. Use at your own discretion.\nThis tokenizer applies jieba’s cut method to obtain various tokens, then applies a punctuation filter to these tokens. Thereafter, tokens are grouped into sentences.\n\"lang_config\": {\n  \"lang\": \"chinese\",\n  \"options\": {\n    \"stop_words\": [],\n    \"ignore_stop_words\": false\n  }\n}\n\n"],[3,"remark-on-language-modules-flexibility"],[1,"Remark on Language Modules’ Flexibility"],[0,"\nWhile using the same tokenizer for both indexing / search unifies the codebase, one downside is that code size has to be taken into account.\nThe chinese tokenizer for example, which uses jieba-rs, accounts for half of the wasm binary size alone.\nTherefore, the tokenizers will aim to be reasonably powerful and configurable enough, such that the wasm bundle size dosen’t blow up.\nNonetheless, if you feel that a certain configuration option should be supported for a given tokenizer but isn’t, feel free to open up an issue!\n"],[3,"indexing_config"],[1,"indexing_config"],[0,"\nThe configurations in this section specify how and which files to index.\nAll configurations are optional (reasonable defaults provided otherwise), save for the loader_configs key. The cli tool will do nothing if no loaders are specified.\nThe snippet below shows the default values, which need not be altered if you are only indexing html files.\n{\n  \"indexing_config\": {\n    // Number of threads excluding the main thread\n    \"num_threads\": 5,      // when unspecified, this is max(num physical cores - 1, 1)\n\n    // This roughly controls the memory usage of the indexer\n    // If your documents are very small,\n    // increasing this *may* help improve indexing performance.\n    \"num_docs_per_block\": 1000,\n\n    // glob patterns to exclude from indexing\n    \"exclude\": [\n      \"morsels_config.json\"\n    ],\n\n    // Specifies what types of files to index\n    \"loader_configs\": {\n      \"HtmlLoader\": {}     // enables support for .html files\n    },\n    \n    // The threshold (in bytes) at which to \"cut\" index files\n    //\n    // Increasing this produces less but bigger files\n    // (which may take longer to retrieve), and vice versa.\n    \n    \"pl_limit\": 16383,\n\n    // Any index files above this size (in bytes)\n    // will be pre-loaded on initialisation of the search library\n    \"pl_cache_threshold\": 1048576,\n    \n    // Number of index files (\"morsels\") to store per directory\n    \"num_pls_per_dir\": 1000,\n\n    // Number of field stores (`.json` files) to store per directory\n    \"num_stores_per_dir\": 1000,\n\n    // Whether positions will be stored.\n    //\n    // Phrase queries and Query Term Proximity Ranking\n    // will be unavailable if this is false.\n    //\n    // You may want to turn this off for very large collections. (~> 1GB)\n    \"with_positions\": true\n  }\n}\n\n"],[3,"loaders"],[1,"Loaders"],[0,"\nThe indexer is able to handle html, json or csv files. Support for each file type is provided by a “Loader” abstraction.\nYou may configure loaders by including them under the loader_configs key, with any applicable options.\nThe below sections shows the available loaders and configuration options available for each of them.\nHtmlLoader\n{\n  \"HtmlLoader\": {\n    // list of selectors to exclude from indexing\n    \"exclude_selectors\": [\n      \"script,style\"\n    ],\n    \"selectors\": [\n      {\n        \"attr_map\": {},\n        \"field_name\": \"title\",\n        \"selector\": \"title\"\n      },\n      {\n        \"attr_map\": {},\n        \"field_name\": \"body\",\n        \"selector\": \"body\"\n      },\n      {\n        \"attr_map\": {\n          \"id\": \"headingLink\" // \"store the id attribute under headingLink\"\n        },\n        \"field_name\": \"heading\",\n        \"selector\": \"h1,h2,h3,h4,h5,h6\"\n      }\n    ]\n  }\n}\n\nThe html loader traverses the document depth-first.\nAt each element, it checks if any of the selectors under the selectors.selector key matches the element. If so, all descendants (elements, text) under this element will then be indexed under the field specified by field_name. If one the element’s descendants matched another selector however, the configuration is then overwritten for that descendant (and its descendants).\nThe attr_map allows indexing attributes of elements (not including descendants) under fields as well.\nJsonLoader\n{\n  \"JsonLoader\": {\n    \"field_map\": {\n      \"body\": \"body\",\n      \"heading\": \"heading\",\n      \"link\": \"_relative_fp\",\n      \"title\": \"title\"\n    },\n    // Order in which to index the fields of the json {} document\n    \"field_order\": [\n      \"title\",\n      \"heading\",\n      \"body\",\n      \"link\"\n    ]\n  }\n}\n\nJson files can also be indexed. To do this, the field_map key must be specified, which contains a mapping of json key -> field name.\nThe field_order controls in which order these fields are indexed, which can influence position based functions such as query term proximity ranking.\nThe json files itself can be either\n\nAn object, following the schema set out in field_map\nAn array of objects following the schema set out in field_map\n\nCsvLoader\n{\n  \"CsvLoader\": {\n    \"use_headers\": false,\n    \"header_field_map\": {},\n    \"header_field_order\": [],\n    \"index_field_map\": {\n      \"0\": \"link\",\n      \"1\": \"title\",\n      \"2\": \"body\",\n      \"4\": \"heading\"\n    },\n    \"index_field_order\": [\n      1,\n      4,\n      2,\n      0\n    ],\n    \"parse_options\": {\n      \"comment\": null,\n      \"delimiter\": 44,\n      \"double_quote\": true,\n      \"escape\": null,\n      \"has_headers\": true,\n      \"quote\": 34\n    }\n  }\n}\n\nField mappings for csv can be configured using one of the field_map / field_order key pairs. The use_headers parameter specifies which of the two pairs of settings to use.\n"],[3,"full-example"],[1,"Full Example"],[0,"\n{\n  \"fields_config\": {\n    \"field_store_block_size\": 250,\n    \"fields\": [\n      {\n        \"name\": \"title\",\n        \"do_store\": false,\n        \"weight\": 0.2,\n        \"k\": 1.2,\n        \"b\": 0.25\n      },\n      {\n        \"name\": \"heading\",\n        \"do_store\": false,\n        \"weight\": 0.3,\n        \"k\": 1.2,\n        \"b\": 0.3\n      },\n      {\n        \"name\": \"body\",\n        \"do_store\": false,\n        \"weight\": 0.5,\n        \"k\": 1.2,\n        \"b\": 0.75\n      },\n      {\n        \"name\": \"headingLink\",\n        \"do_store\": false,\n        \"weight\": 0.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      },\n      {\n        \"name\": \"_relative_fp\",\n        \"do_store\": true,\n        \"weight\": 0.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      }\n    ]\n  },\n  \"lang_config\": {\n    \"lang\": \"latin\",\n    \"options\": null\n  },\n  \"indexing_config\": {\n    \"num_docs_per_block\": 1000,\n    \"pl_limit\": 16383,\n    \"pl_cache_threshold\": 1048576,\n    \"exclude\": [\n      \"morsels_config.json\"\n    ],\n    \"loader_configs\": {\n      \"HtmlLoader\": {\n        \"exclude_selectors\": [\n          \".no-index\"\n        ]\n      },\n      \"JsonLoader\": {\n        \"field_map\": {\n          \"body\": \"body\",\n          \"heading\": \"heading\",\n          \"link\": \"_relative_fp\",\n          \"title\": \"title\"\n        },\n        \"field_order\": [\n          \"title\",\n          \"heading\",\n          \"body\",\n          \"link\"\n        ]\n      }\n    },\n    \"pl_names_to_cache\": [],\n    \"num_pls_per_dir\": 1000,\n    \"num_stores_per_dir\": 1000,\n    \"with_positions\": true\n  }\n}\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"getting_started_mdbook.html"],[2,"Mdbook - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"mdbook-morsels"],[1,"mdbook-morsels"],[0,"\nmdbook-morsels is a simple search plugin replacement for mdbook to use morsels’ search interface and library instead of elasticlunr.js.\nIt uses the css variables provided by the 5 main default themes in mdbook to style the search user interface. You can switch the themes in this documentation to try out the different themes.\nNote: The “Morsels” theme is not included in the plugin and is specific to this documentation. It is included only to show the default styling (without mdbook-morsels).\n"],[3,"installation"],[1,"Installation"],[0,"\nYou will need to have installed the following command-line crates (cargo install <crate-name> or with the binaries in your PATH):\n\nmdbook\nmdbook-morsels\nmorsels_indexer\n\n\n⚠️ Ensure the mdbook-morsels and morsels_indexer versions are the same.\n\nThen, minimally add the first two configuration sections below to your book.toml configuration file:\n[output.html.search]\nenable = false               # disable the default mdbook search feature implementation\n\n[preprocessor.morsels]\ncommand = \"mdbook-morsels\"\nrenderer = [\"html\"]          # this should only be run for the html renderer\n\n# Plugin configuration options (optional)\n[output.morsels]\n\n# See search configuration page\nmode = \"target\"\n\n# Relative path to the indexer configuration file from the root project directory\n# This will automatically be created if it dosen't exist.\nconfig = \"morsels_config.json\"\n\n# Don't add the default stylesheet from morsels/search-ui,\n# nor the inline css variables for the default mdbook themes\n#\n# Only needed if you want to use some custom styling\nno-css = false\n\n# This scales some settings of the indexer according to your collection size\n# (see chapter on \"Tradeoffs\")\nscaling = true\n\n"],[3,"preview"],[1,"Preview"],[0,"\nUse the following (non-canonical, documentation specific) buttons to try out the different mode parameters.\n\n\n    Auto\n    Dropdown\n    Fullscreen\n    Target\n\nYou can also try out the different themes on this documentation using mdbook’s paintbrush icon!\n\n\nGif of `mode='fullscreen'` across the different themes\n\nAlso note that unlike the default search feature, the search bar is always there – there is no search icon on the navbar to click. I am still trying to figure how to add this nicely (without runtime hacks) within mdbook’s plugin framework :)\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"future_plans.html"],[2,"Future Plans - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"whats-next"],[1,"What’s Next"],[0,"\nThis section briefly details some future plans for this project, organised roughly in decreasing priority:\n"],[3,"cutting-down-the-wasm-binary-size"],[1,"Cutting Down the Wasm Binary Size"],[0,"\nNot much to be said here - the smallest wasm binary is 992KB, and 334KB when gzipped.\nDefinitely something to work on, although the silver lining (hopefully) is that users typically don’t need to immediately (within < 1s of page load?) access search functionalities.\n"],[3,"search-api"],[1,"Search API"],[0,"\nI.e. publishing @morsels/search-lib. Also, stabilizing some finer related details of the renderers API available.\n"],[3,"field-sorting--types"],[1,"Field Sorting & Types"],[0,"\nWhile the focus currently is on free text queries sorted by relevance (BM25), it would definitely be great (if feasible) to support use cases that need to sort results by fields values.\nField types (e.g. integers), and sorting based on these types may be supported as such in the future.\n"],[3,"proximity-queries"],[1,"Proximity Queries"],[0,"\nBasically something like this:\nlorem AROUND(2) dolor\n\n"],[3,"dynamic-linking-for-language-modules"],[1,"Dynamic Linking for Language Modules"],[0,"\nLanguage modules are “bundled” into the morsels_search wasm module at the moment. In order to reduce binary size, each module is configured via feature flags and bundled separately. This however does mean that any and all language modules have to be PR-ed to the upstream repo (otherwise, one would have to maintain a separate fork of morsels on its own distribution channels). This is pending better dynamic linking support in wasm.\n"],[3,"exposing-morsels_indexer-package-api"],[1,"Exposing morsels_indexer Package API"],[0,"\nThe plan is for the morsels_indexer package to also expose its API. This is still a WIP at this point, and I’m not exactly sure if there would even be a demand for this given the very specific use cases of this tool – raise an issue if so!\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"developers_setting_up.html"],[2,"Setting Up - Morsels Documentation"],[0,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"setting-up"],[1,"Setting Up"],[0,"\nTo get your development environment setup, you’ll need to have installed the following:\n\ncargo, the package manager for Rust\nwasm-pack, the “one-stop shop” for working with rust generated WebAssembly\nmdbook, if working on mdbook-morsels plugin\n\n"],[3,"commands"],[1,"Commands"],[0,"\nAfter you have installed the above dependencies, run npm run setup to install npm-related dependencies. This command also symlinks the all npm packages locally, including the ones generated by wasm-pack.\n"],[3,"test-files"],[1,"Test Files"],[0,"\nYou’ll also need to source a suitable set of html, json, or csv files that is loadable by one of the command-line loaders. The data in the collection should be mappable to the fields required by @morsels/search-ui for easy testing.\nThe test collection I used for the majority of development is a 380mb csv corpus for example, in the following format.\n\"date\", | \"title\",                 | \"content\",              | \"court\"\n----------------------------------------------------------------------------------------\nunused, | mapped to 'title' field, | mapped to 'body' field, | mapped to 'heading' field\n\nOnce you have your test files, place them under the <project-root>/test_files/1/source directory. If using a custom file format, you will likely need to configure the data and field mappings as well. You can run cargo run -p morsels_indexer <project-root>/test_files/1/source --init to create the default configuration file as a template, and proceed from there.\n\nI am unable to release my test collections I conveniently had on hand for licensing reasons =(, and have yet to search for a freely available one.\nIf you are aware of a widely available and easily integrated dataset, feel free to help supplement the docs here!\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]]]