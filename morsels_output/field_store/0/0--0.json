[[[4,"search_features.html"],[0,"Search Features - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"search-features"],[1,"Search Features"],[2,"\nThis page outlines the available search features.\n"],[3,"boolean-operators-parentheses"],[1,"Boolean Operators, Parentheses"],[2,"\nAND and NOT operators are supported.\nOR operators are not supported, but its function is implicitly left to the tokenizer (see below for an example).\nParentheses (...) can be used to group expressions together.\nlorem ipsum                 - documents containing either lorem OR ipsum\nlorem AND ipsum             - documents with both \"lorem\" and \"ipsum\"\nlorem AND NOT ipsum         - documents with \"lorem\" but not \"ipsum\"\nlorem AND NOT (ipsum dolor) - documents with \"lorem\" but not (\"ipsum\" OR \"dolor\")\n\n"],[3,"phrase-queries"],[1,"Phrase Queries"],[2,"\nPhrase queries are also supported by enclosing the relevant terms in \"...\".\n\"lorem ipsum\" - documents containing \"lorem\" and \"ipsum\" appearing one after the other\n\nYou will need to enable the withPositions index feature for this to work.\n"],[3,"field-search"],[1,"Field Search"],[2,"\nField queries are supported via the following syntax field_name:, following the same syntax rules as the NOT operator.\ntitle:lorem             - documents containing \"lorem\" in the field \"title\"\ntitle:(lorem AND ipsum) - documents with both \"lorem\" and \"ipsum\" in the\n                          field \"title\" only\nlorem AND title:ipsum   - documents with \"ipsum\" in the title and \"lorem\" in any field\n\n"],[3,"escaping-search-operators"],[1,"Escaping Search Operators"],[2,"\nAll search operators can also be escaped using the \\ character like such:\nlorem\\ AND ipsum            - interpreted literally as \"lorem AND ipsum\"\n\\NOT lorem                  - interpreted literally as \"NOT lorem\"\n\\(not a parentheses group\\)\n\\\"not a phrase query\\\"\n\"phrase query with qu\\\"ote inside\"\ntitle\\:lorem\n\n"],[3,"non-user-facing-features"],[1,"Non User-Facing Features"],[2,"\n"],[3,"webworker-built-in"],[1,"WebWorker Built-in"],[2,"\nMost of the search library operates on a WebWorker where it matters (e.g. setup, query ranking), so you don’t have to worry about blocking the UI thread.\nRetrieval of stored document fields (the raw document text for generating result previews and highlighting) is however done on the main thread, as copying many large documents to-and-fro WebWorker interfaces incurs substantial overhead.\nSearch UI related functionalities, for example result preview generation, is also done on the main thread.\nThe main rationale is that there is simply no way of parsing HTML faster than implementations provided by the browser. (the original HTML document can be used as an alternative to storing document fields for result preview generation)\n"],[3,"low-level-inverted-index-format"],[1,"Low-Level Inverted Index Format"],[2,"\nSome basic, but high-return compression schemes are also employed:\n\nGap encoding for document ids, positions\nBytewise variable integer encoding\n\nTo facilitate decompression efficiency of such a low-level format, most of the search library is powered by WebAssembly (Rust) as such.\n"],[3,"ranking-specifics"],[1,"Ranking Specifics"],[2,"\nMost query expressions (e.g. free text queries like lorem ipsum) are ranked using the BM25 model, while AND and () operators sum the respective BM25 scores of their operands. A soft disjunctive maximum is calculated across a document’s field scores.\nA simple form of query term proximity ranking is also supported and enabled by default for top-level expressions when the with_positions index feature is enabled. Results are scaled in an inverse logarithmic manner according to how close disjunctive search expressions are to one another.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"search_configuration_styling.html"],[0,"Styling - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"styling"],[1,"Styling"],[2,"\n"],[3,"themes"],[1,"Themes"],[2,"\nMorsels provides 2 built-in themes by default, which correspond to the 2 stylesheets in the releases.\nThese 2 stylesheets also expose a wide range of css variables which you can alter as needed.\nHead on over to the demo site here to try them out!\n"],[3,"light"],[1,"Light"],[2,"\n"],[3,"cdn-link"],[1,"CDN link"],[2,"\n<!-- Replace \"v0.1.1\" as appropriate -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/ang-zeyu/morsels@v0.1.1/packages/search-ui/dist/search-ui-light.css\" />\n\n"],[3,"preview"],[1,"Preview"],[2,"\n\n\n\n\n\n"],[3,"dark"],[1,"Dark"],[2,"\n"],[3,"cdn-link-1"],[1,"CDN link"],[2,"\n<!-- Replace \"v0.1.1\" as appropriate -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/ang-zeyu/morsels@v0.1.1/packages/search-ui/dist/search-ui-dark.css\" />\n\n"],[3,"preview-1"],[1,"Preview"],[2,"\n\n\n\n\n"],[3,"input-element-as-a-button"],[1,"Input Element As a Button"],[2,"\nWhere the input option passed to initMorsels is concerned, Morsels adopts a minimally invasive approach to styling, preferring to leave this to the individual site’s preferences.\nFor reasons of accessbility however, some minimal styling is applied when using the fullscreen UI to convey the intention of a button. This is limited to a background + color application on focus, cursor: pointer application on hover, and text-align: center (for the placeholder) application. The background and color application in particular are applied with a !important modifier as they are key to keyboard accessibility, but are also overridable easily with Morsels’ css variables.\nYou may override and addon to these styles as needed, to convey the intention of a button further.\nIf using the default UI mode of auto, you can also set a different placeholder, or use the .morsels-button-input selector to apply your styles only when the fullscreen UI is in use. For example,\n.morsels-button-input:focus:not(:hover) {\n    background: #6c757d !important;\n}\n\nAccessibility labels and roles are automatically set however, so you needn’t worry about those.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"getting_started.html"],[0,"Getting Started - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"getting-started"],[1,"Getting Started"],[2,"\nThis page assumes the use case of a static site, that is:\n\nYou have some HTML files you want to index.\nThese HTML files are served in a static file server, and are linkable to.\nYou have an <input> element to attach a search dropdown to.\nFor mobile devices, a fullscreen UI will show instead when this input element is focused.\nThis documentation uses an alternative interface (try the search function!), which is covered later.\nTo preview the defaults, head on over here.\n\nIf you require more (e.g. indexing custom json files), have a look through here first, then head on over to the subsequent configuration pages.\n"],[3,"installing-the-indexer"],[1,"Installing the indexer"],[2,"\nThere are two options here:\n\nIf you have the rust / cargo toolchains setup, simply run cargo install morsels_indexer --vers 0.1.1.\nAlternatively, the cli binaries are also available here.\n\n"],[3,"running-the-indexer"],[1,"Running the indexer"],[2,"\nRun the executable as such, replacing <source-folder-path> with the relative or absolute folder path of your source html files, and <output-folder-path> with your desired index output folder.\nmorsels <source-folder-path> <output-folder-path>\n\nIf you are using the binaries, replace morsels with the appropriate executable name.\n"],[3,"other-cli-options"],[1,"Other Cli Options"],[2,"\n\n-c <config-file-path>: You may also change the config file location (relative to the source-folder-path) using the -c <config-file-path> option.\n--preserve-output-folder: All existing contents in the output folder are also removed when running a full index. Specify this option to avoid this.\n\n"],[3,"installing-the-search-ui"],[1,"Installing the search UI"],[2,"\n"],[3,"installation-via-cdn"],[1,"Installation via CDN"],[2,"\n<!-- Replace \"v0.1.1\" as appropriate -->\n\n<!--  Search UI script -->\n<script src=\"https://cdn.jsdelivr.net/gh/ang-zeyu/morsels@v0.1.1/packages/search-ui/dist/search-ui.bundle.js\"></script>\n<!-- Search UI css, this provides some basic styling for the search dropdown, and can be omitted if desired -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/ang-zeyu/morsels@v0.1.1/packages/search-ui/dist/search-ui-light.css\" />\n\n\n⚠️ Ensure the versions here tally with the indexer version used.\n\n"],[3,"hosting-the-files"],[1,"Hosting the Files"],[2,"\nIf you wish to serve the files locally instead, you can find the necessary files in the release packages here. The following files inside search.morsels.zip are required:\n\nsearch-ui.bundle.js\nEither search-ui-light.css / search-ui-dark.css\n\nunless you are designing your own stylesheet from scratch\n\n\nA pair of language-specific bundles which are requested as necessary at runtime.\n\nsearch.worker-*.bundle.js\nan accompanying wasm binary\n\n\n\n\n⚠️ All files are expected to be accessible in the same folder relative to the linked search-ui.bundle.js.\n\n"],[3,"ui-initialisation"],[1,"UI Initialisation"],[2,"\nOnce you have loaded the bundles, to initialise morsels, simply call the initMorsels function in your page.\nThis requires an input element with an id of morsels-search to be present in the page by default, which can be configured via uiOptions.input.\ninitMorsels({\n  searcherOptions: {\n    // Output folder url specified as the second parameter in the cli command\n    url: 'http://192.168.10.132:3000/output/',\n  },\n  uiOptions: {\n    // Input / source folder url, specified as the first parameter in the cli command\n    sourceFilesUrl: 'http://192.168.10.132:3000/source/',\n  }\n});\n\n"],[3,"whats-next"],[1,"What’s Next"],[2,"\nThat’s it! Head on over to the search configuration chapter to learn more about configuring the UI behaviours / outputs.\nThe indexer configuration chapters covers a wide range of topics such as adding additional fields to index, mapping file contents to fields, and language configurations.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"indexer/presets.html"],[0,"Scaling Presets - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"scaling-presets"],[1,"Scaling Presets"],[2,"\n5 configuration presets are designed primarily for use with Morsels’ main intended use case of supporting static site search.\nEach preset primarily makes a tradeoff between the document collection size it can support, and the number of rounds of network requests (RTT). Morsels also supports generating result previews from source files, if it is preferable (e.g. to reduce file bloat from additional field stores).\nThe default preset is small, which generates a monolithic index and field store, much like other client side indexing tools.\nSpecify the preset key in your configuration file to change this.\n{\n    \"preset\": \"small\" | \"medium\" | \"large\" | \"medium_source\" | \"large_source\"\n}\n\n"],[3,"overview"],[1,"Overview"],[2,"\n\nsmall, medium and large corresponds to 0, 1, or 2 rounds of network requests in the table below.\n\nPresetDescription\nsmallGenerates a monolithic index and field store. Identical to most other client side indexing tools.\nmediumGenerates a monolithic index but sharded (on a per document basis) field store. Only field stores of documents to generate result previews for a retrieved.\nlargeGenerates both a sharded index and field store. Only index files that are required for the query are retrieved. Keeps stop words. This is the preset used in the demo here!\nmedium_sourceGenerates a monolithic index and field store of source document links. Uses the links to retrieve source documents for result preview generation.\nlarge_sourceGenerates a sharded index and monolithic field store of source document links. Uses the links to retrieve source documents for result preview generation. Keeps stop words.\n\n"],[3,"modified-properties"],[1,"Modified Properties"],[2,"\nPresets modify the following properties:\n\nSearch Configuration: \n\ncacheAllFieldStores\n\n\nLanguage Configuration:\n\nignore_stop_words\n\n\nIndexing Configuration:\n\nWhat fields are stored (do_store). Not set if fields_config.fields is present.\nfield_store_block_size\npl_limit\npl_cache_threshold\n\n\n\nAny of these values specified in the configuration file will override that of the preset’s.\n"],[3,"other-options"],[1,"Other Options"],[2,"\nThere are 2 other options especially worth highlighting that can help reduce the index size (and hence support larger collections) in general.\n\nignore_stop_words=false\nwith_positions=false\nPositional information takes up a considerable (up to 3-4 times larger) proportion of the index size!\n\nIf you are willing to forgo some features (e.g. phrase queries, boolean queries of stop words) in return for reducing the index size, you can enable / disable these options as appropriate.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"indexer/language.html"],[0,"Language - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"language-configuration"],[1,"Language Configuration"],[2,"\nThe snippet below shows the default values for language configuration. The main tokenizer module is specified by lang, while the options key supplies tokenization options unique to each language module.\n\nThese options are also applied at search time, which is retrieved from a metadata file in the index output directory.\n\n{\n  \"lang_config\": {\n    \"lang\": \"ascii\",\n    \"options\": {\n      // Language dependent\n    }\n  }\n}\n\nOnly the following 3 tokenizers are supported for now:\n"],[3,"ascii-tokenizer"],[1,"Ascii Tokenizer"],[2,"\nThe default tokenizer splits on sentences, then whitespaces to obtain tokens.\nAn asciiFoldingFilter is then applied to these tokens, followed by punctuation and non-word boundary removal.\n{\n  \"lang\": \"ascii\",\n  \"options\": {\n    \"stop_words\": [\n      \"a\", \"an\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\", \"for\",\n      \"if\", \"in\", \"into\", \"is\", \"it\", \"no\", \"not\", \"of\", \"on\", \"or\",\n      \"such\", \"that\", \"the\", \"their\", \"then\", \"there\", \"these\",\n      \"they\", \"this\", \"to\", \"was\", \"will\", \"with\"\n    ],\n    \"ignore_stop_words\": true,\n\n    // Hard limit = 250\n    \"max_term_len\": 80\n  }\n}\n\n"],[3,"latin-tokenizer"],[1,"Latin Tokenizer"],[2,"\nThis is essentially the same as the ascii tokenizer, but adds a stemmer option.\n{\n  \"lang\": \"latin\",\n  \"options\": {\n    // ----------------------------------\n    // Ascii Tokenizer options also apply\n    // ...\n    // ----------------------------------\n\n    // Any of the languages here\n    // https://docs.rs/rust-stemmers/1.2.0/rust_stemmers/enum.Algorithm.html\n    // Languages other than \"english\" have not been extensively tested. Use with caution!\n    \"stemmer\": \"english\"\n  }\n}\n\nIf you do not need stemming, use the ascii tokenizer, which has a smaller wasm binary.\n"],[3,"chinese-tokenizer"],[1,"Chinese Tokenizer"],[2,"\nA basic chinese tokenizer based on jieba-rs is also available, although, it hasn’t been extensively tested. Use with caution!\nThis tokenizer applies jieba’s cut method to obtain various tokens, then applies a punctuation filter to these tokens. Thereafter, tokens are grouped into sentences.\n{\n  \"lang\": \"chinese\",\n  \"options\": {\n    \"stop_words\": [],\n    \"ignore_stop_words\": true\n  }\n}\n\n"],[3,"stop-words"],[1,"Stop Words"],[2,"\nAll tokenizers support keeping or removing (default) stop words using the ignore_stop_words option.\nKeeping them enables the following:\n\nProcessing phrase queries such as \"for tomorrow\"\nBoolean queries of stop words (e.g. if AND forecast AND sunny)\nMore accurate ranking for free text queries, which employ an inverse document frequency heuristic to prune stop words only when their impact is small (far from always the case!). \n\n\nIf you are using any of the 2 large presets covered in section 5.4, which generates a sharded index, stop words are not removed by default. This is because these options split up the index, which means that such commonly occuring words are likely to be separately placed into one file. (and never requested until necessary)\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"indexer/indexing.html"],[0,"Indexing - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"indexing-configuration"],[1,"Indexing Configuration"],[2,"\nThe configurations in this section mainly specify how (mapping file contents to fields) and which files to index.\nAll configurations are optional, save for the loader_configs key. The cli tool will do nothing if the loader_configs dictionary is empty.\nThe snippet below shows the default values:\n{\n  \"indexing_config\": {\n    \"num_threads\": <number of physical cpus> - 1,\n\n    \"num_docs_per_block\": 1000,\n\n    \"exclude\": [\n      \"morsels_config.json\"\n    ],\n\n    \"loader_configs\": {\n      \"HtmlLoader\": {}\n    },\n    \n    \"pl_limit\": 4294967295,\n\n    \"pl_cache_threshold\": 0,\n\n    \"num_pls_per_dir\": 1000,\n\n    \"with_positions\": false\n  }\n}\n\n"],[3,"mapping-file-data-to-fields"],[1,"Mapping File Data to Fields"],[2,"\nThe indexer is able to handle data from HTML, JSON, csv or txt files. Support for each file type is provided by a “Loader” abstraction.\nYou may configure loaders by including them under the loader_configs key, with any applicable options.\n"],[3,"html-files-loader_configshtmlloader"],[1,"HTML Files: loader_configs.HtmlLoader"],[2,"\n\"loader_configs\": {\n  \"HtmlLoader\": {\n    // list of selectors to exclude from indexing\n    \"exclude_selectors\": [\n      \"script,style,pre\"\n    ],\n    \"selectors\": [\n      {\n        \"attr_map\": {},\n        \"field_name\": \"title\",\n        \"selector\": \"title\"\n      },\n      {\n        \"attr_map\": {},\n        \"field_name\": \"body\",\n        \"selector\": \"body\"\n      },\n      {\n        \"attr_map\": {\n          \"id\": \"headingLink\" // \"store the id attribute under headingLink\"\n        },\n        \"field_name\": \"heading\",\n        \"selector\": \"h1,h2,h3,h4,h5,h6\"\n      }\n    ]\n  }\n}\n\nThe HTML loader traverses the document depth-first, in the order text nodes and attributes appear.\nAt each element, it checks if any of the selectors under the selectors.selector key matches the element. If so, all descendants (elements, text) of that element will then be indexed under the specified field_name.\nThis process repeats as the document is traversed — if another of the element’s descendants matched a different selector, the field mapping is overwritten for that descendant’s descendants.\nThe attr_map option allows indexing attributes of each element under fields as well.\n"],[3,"json-files-loader_configsjsonloader"],[1,"JSON Files: loader_configs.JsonLoader"],[2,"\n\"loader_configs\": {\n  \"JsonLoader\": {\n    \"field_map\": {\n      \"chapter_text\": \"body\",\n      \"book_link\": \"link\",\n      \"chapter_title\": \"title\"\n    },\n    // Order in which to index the keys of the json {} document\n    \"field_order\": [\n      \"book_link\",\n      \"chapter_title\",\n      \"chapter_text\"\n    ]\n  }\n}\n\nJson files can also be indexed. The field_map key must be specified, which contains a mapping of json key -> field name.\nThe field_order array controls the order in which these fields are indexed, which can have a minor influence on query term proximity ranking, if positions are indexed.\nThe json file can be either:\n\nAn object, following the schema set out in field_map\nAn array of objects following the schema set out in field_map\n\n"],[3,"csv-files-loader_configscsvloader"],[1,"CSV Files: loader_configs.CsvLoader"],[2,"\n\"loader_configs\": {\n  \"CsvLoader\": {\n    // ---------------------\n    // Map data using csv headers\n    \"use_headers\": false,\n    \"header_field_map\": {},\n    \"header_field_order\": [],\n    // ---------------------\n    // Or simply csv header indices\n    \"index_field_map\": {\n      \"0\": \"link\",\n      \"1\": \"title\",\n      \"2\": \"body\",\n      \"4\": \"heading\"\n    },\n    \"index_field_order\": [\n      1,\n      4,\n      2,\n      0\n    ],\n    // ---------------------\n    // Options for csv parsing, from the Rust \"csv\" crate\n    \"parse_options\": {\n      \"comment\": null,\n      \"delimiter\": 44,\n      \"double_quote\": true,\n      \"escape\": null,\n      \"has_headers\": true,\n      \"quote\": 34\n    }\n  }\n}\n\nField mappings for CSV files can be configured using one of the field_map / field_order key pairs. The use_headers parameter specifies which of the two pairs of settings to use.\nThe parse_options key specifies options for parsing the csv file. In particular, note that the has_headers key is distinct from and does not influence the use_headers parameter.\n"],[3,"text-files-loader_configstxtloader"],[1,"Text Files: loader_configs.TxtLoader"],[2,"\n\"loader_configs\": {\n  \"TxtLoader\": {\n    \"field\": \"field_name\",\n  }\n}\n\nThis loader simply reads .txt files and indexes all its contents into a single field.\n"],[3,"miscellaneous-options"],[1,"Miscellaneous Options"],[2,"\n"],[3,"file-exclusions-exclude--morsels_configjson"],[1,"File Exclusions: exclude = [\"morsels_config.json\"]"],[2,"\nGlobal file exclusions can be specified in this parameter, which is simply an array of file globs.\n"],[3,"adding-positions-with_positions--false"],[1,"Adding Positions: with_positions = false"],[2,"\nThis option controls whether positions will be stored.\nFeatures such as phrase queries that require positional information will not work if this is disabled.\nTurning this off for very large collections (~> 1GB) can increase the tool’s scalability, at the cost of such features.\n"],[3,"indexing-and-search-scaling"],[1,"Indexing and Search Scaling"],[2,"\nPrefer the in-built scaling presets option for configuring the tool’s scalability. Where needed, the following options are available for finer control.\n"],[3,"index-shard-size-pl_limit"],[1,"Index Shard Size: pl_limit"],[2,"\nThis is the main threshold parameter (in bytes) at which to “cut” index (pl meaning postings list) files.\nIncreasing this value produces less but bigger files (which may take longer to retrieve), and vice versa.\nIncreasing the value may also be useful for caching when used in conjunction with pl_cache_threshold below, since fewer index files will be produced.\n\n"],[3,"index-caching-pl_cache_threshold"],[1,"Index Caching: pl_cache_threshold"],[2,"\nIndex files that exceed this number will be cached by the search library at initilisation.\nIt can be used to configure morsels for response time (over scalability) for some use cases. This is discussed in more detail in Tradeoffs.\n"],[3,"index-shards-per-directory-num_pls_per_dir"],[1,"Index Shards per Directory: num_pls_per_dir"],[2,"\nThis parameter simply controls how many index files you want to store in a single directory.\nWhile the default value should serve sufficiently for most use cases, some file systems are less efficient at handling large amounts of files in one directory. Tuning this parameter may help to improve performance when looking up a particular index file.\n"],[3,"indexing-performance"],[1,"Indexing Performance"],[2,"\n"],[3,"number-of-threads-num_threads"],[1,"Number of Threads: num_threads"],[2,"\nThis is the number of threads to use, excluding the main thread. When unspecified, this is max(min(num physical cores, num logical cores) - 1, 1).\n"],[3,"memory-usage-num_docs_per_block"],[1,"Memory Usage: num_docs_per_block"],[2,"\nThis parameter roughly controls the memory usage of the indexer; You may think of it as “how many documents to keep in memory before flushing results”.\nIf your documents are very small, increasing this may help improve indexing performance.\n\n⚠️ Ensure field_store_block_size is a clean multiple or divisor of this parameter.\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"indexer/fields.html"],[0,"Fields - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"field-configuration"],[1,"Field Configuration"],[2,"\nIf you are using morsels’ search UI as-is for static site search, you can likely skip configuring fields_config.fields.\nThere are a few other parameters under fields_config however, which can be used to adjust response times, caching, and file bloat individually. However, you should be well-served by the preconfigured scaling presets for such purposes.\n{\n  \"fields_config\": {\n    \"cache_all_field_stores\": true,\n    \"field_store_block_size\": 10000,\n    \"num_stores_per_dir\": 1000,\n    \"fields\": [\n      {\n        \"name\": \"title\",\n        \"do_store\": false,\n        \"weight\": 2.0,\n        \"k\": 1.2,\n        \"b\": 0.15\n      },\n      {\n        \"name\": \"heading\",\n        \"do_store\": false,\n        \"weight\": 1.5,\n        \"k\": 1.2,\n        \"b\": 0.25\n      },\n      {\n        \"name\": \"body\",\n        \"do_store\": false,\n        \"weight\": 1.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      },\n      {\n        \"name\": \"headingLink\",\n        \"do_store\": false,\n        \"weight\": 0.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      },\n      // Internal, hardcoded field (see \"Special Fields\")\n      {\n        \"name\": \"_relative_fp\",\n        \"do_store\": true,\n        \"weight\": 0.0,\n        \"k\": 1.2,\n        \"b\": 0.75\n      }\n    ]\n  }\n}\n\n"],[3,"storing-fields-do_store"],[1,"Storing Fields: do_store"],[2,"\nMorsels stores fields that have do_store: true specified in the field configuration into a json file.\nAt search time, these fields are retrieved for result preview generation.\n"],[3,"field-store-granularity-field_store_block_size-num_stores_per_dir"],[1,"Field Store Granularity: field_store_block_size, num_stores_per_dir"],[2,"\nThe field_store_block_size parameter controls how many documents to store in one json file. Batching multiple files together if the fields stored are small can lead to less files and better browser caching. The num_stores_per_dir parameter controls how many json files should be stored together in one directory.\n\n⚠️ Ensure field_store_block_size is a clean multiple or divisor of the num_docs_per_block parameter under indexing later.\nThis is a rather arbitiary limitation chosen to reduce the field store indexing scheme complexity,\nbut should work well enough for most use cases.\n\n"],[3,"field-store-caching-cache_all_field_stores"],[1,"Field Store Caching: cache_all_field_stores"],[2,"\nThis is the same as the configuration option under search configuration.\nIf both are specified, the value specified in the initMorsels call will take priority.\nAll fields specified with do_store=true would be cached up front on initialisation of the search library.\nIts usage alongside other options is discussed in more detail under the chapter Tradeoffs.\n"],[3,"field-scoring-parameters"],[1,"Field Scoring Parameters"],[2,"\nweight\nThis parameter is a boost / penalty multiplied to a individual field’s score.\nSpecifying 0.0 will result in the field not being indexed (although, it can still be stored for retrieval using do_store).\nk & b\nThese are Okapi BM25 model parameters. The following article provides a good overview on how to configure these if the defaults are unsuitable for your use case.\n"],[3,"default-field-configuration"],[1,"Default Field Configuration"],[2,"\nThe functions of the default fields for the user interface are as follows:\n\n\n\ntitle: This is the header for a single document match. \n\n\nheading: These are section headers which appear on the left of corresponding body field, sourced from <h1-6> tags.\n\n\nheadingLink: These are the id attributes of corresponding <h1-6> tags. When found, an #anchor is appended to the link.\n\n\nbody: This field is the text that appears to the right of headings (or on its own if there is no corresponding heading).\n\n\n_relative_fp or link: If the title field is missing for any document, this field takes its place in the header. It is also used to link to the source document (in the <a /> tag) and (optionally) for generating result previews.\n\nNote: The link field is not setup by default; The combination of sourceFilesUrl + _relative_fp serves the same purpose. The link field serves to accomodate more custom data requirements (e.g. linking to another domain, or indexing a json document).\n\n\n\n"],[3,"mapping-file-data-to-fields"],[1,"Mapping File Data to Fields"],[2,"\nDefining fields is all good, but you may also need a way to map custom-formatted file data to each of these fields if the default mappings are insufficient. This is discussed later under indexing.\nThe exception are “special” fields below, which have “hardcoded” values.\n"],[3,"special-fields"],[1,"Special Fields"],[2,"\n_relative_fp\nThis is a “hardcoded” field generated by the indexer, in that its value is fixed as the relative file path from your source folder path to the file.\nIt is included in the default configuration to facilitate constructing a source file link, used to link to the document itself (via the <a></a> tag), and optionally for result preview generation.\nIf this is removed, this field simply won’t be indexed nor stored.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"search_configuration.html"],[0,"Search UI - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"search-configuration"],[1,"Search Configuration"],[2,"\nAll search related options can be provided through the initMorsels function, exposed by the search bundle.\nThere are 2 categories of options, the first being related to internal search library functionalities, and the second the user interface.\n\n"],[3,"forenote-on-mobile-device-detection"],[1,"Forenote on Mobile Device Detection"],[2,"\nNote that some options in both the search library and UI are (by default) tuned based on whether the client is a “mobile device”:\n\nQuery term proximity ranking is disabled\nThe fullscreen version of the user interface is used for mode='auto' (see UI Mode)\n\nOverrides and the process of this detection is configurable, and will be covered later.\n\n"],[3,"search-ui-options"],[1,"Search UI Options"],[2,"\nSearch UI options are organised under the uiOptions key:\ninitMorsels({\n    uiOptions: {\n        // ... options go here ...\n    }\n})\n\nFor brevity, this page covers only a subset of the most important options.\nThe subsequent sub-chapter provides a few more APIs to customise the HTML output. If you have a configuration use case that cannot be achieved without these APIs, and you think should be included as a simpler configuration option here, feel free to raise a feature request!\n"],[3,"input-element"],[1,"Input Element"],[2,"\nOptionDefault ValueDescription\ninput'morsels-search'id of the input element or a HTML element reference\ninputDebounce100debounce time of keystrokes to the input element\npreprocessQuery(q) => qany function for preprocessing the query. Can be used to add a field filter for example.\n\nThe input element is the most important option, and is required in most cases. Its purpose varies depending on the mode specified below.\n"],[3,"ui-mode"],[1,"UI Mode"],[2,"\nmode = 'auto'\nThe search UI provides 4 main different behaviours.\nTo try the different modes out, head on over to the mdbook plugin page, which provides various buttons for switching the modes in this documentation!\nModeDetails\n\"auto\"This option is the default, and combines the dropdown and fullscreen options below. If a mobile device is detected as per the earlier section, the fullscreen mode is used. Otherwise, the dropdown mode is used.An event handler is also attached that reruns this adjustment whenever the window is resized.\n\"dropdown\"This wraps the specified input element with a root container. Search results are placed in a <ul> container next to the input element.\n\"fullscreen\"This option creates a completely distinct root container (complete with its own input element, backdrop, close button, …), and attaches it to the <body> element.Under the default stylesheet, the user interface is fullscreen under max-width: 1025px, and takes up roughly 50% of the screen estate otherwise.If the input element is specified, the interface is also shown whenever the input is focused. For keyboard accessibility, some minimal, but overidable styling is applied to the input element in this case.Alternatively, the showFullscreen and hideFullscreen functions returned by the initMorsels call can be used to toggle the UI programatically. This is also the only use case you would not need to specify the input element.\n\"target\"This option is the most flexible, and is used by the mdbook plugin (by default) and this documentation. The input element must be specified, where keystroke event listeners are attached. No dom manipulation is performed unlike the dropdown or auto modes.The search results are output to a custom target element of choice.\n\n"],[3,"ui-mode-specific-options"],[1,"UI Mode Specific Options"],[2,"\nThere are also several options specific to each mode. Note that dropdown and fullscreen options are both applicable to the auto mode.\nModeOptionDefaultDescription\nautofsInputButtonTextundefinedPlaceholder override when the fullscreen UI is in use (i.e. when the input functions like a button). By default, Morsels uses the original placeholder you’ve configured, but makes some minimal styling changes to ensure keyboard accessibility.\ndropdowndropdownAlignment'bottom-end''bottom' or 'bottom-start' or 'bottom-end'.This is the side of the input element to align the dropdown results container and dropdown seperator against.The alignment of the dropdown container will also be automatically flipped horizontally to ensure the most optimal placement (see floating-ui’s docs for a demonstration).\nfullscreenfsInputLabel'Search'Accessibility label for the original input element, when the fullscreen UI is in use.\nfullscreenfsContainer<body> elementid of the element, or an element reference to attach the separate root container to.\nfullscreenfsPlaceholder'Search this site...'Placeholder of the input element in the fullscreen UI.\nall except targettiptrueWhether to show the tip icon. When hovered over, this shows advanced usage information (e.g. how to perform phrase queries).\ntargettargetundefinedid of the element, or an element reference to attach results to.Required if using mode='target'.\n\n"],[3,"general-options"],[1,"General Options"],[2,"\nModeOptionDefaultDescription\nalllabel'Search this site'Accessibility label for the fullscreen UI input.\nallresultsLabel'Site results'Accessibility label for result listboxes.\n\n"],[3,"manually-showing--hiding-the-fullscreen-ui"],[1,"Manually Showing / Hiding the Fullscreen UI"],[2,"\nconst { showFullscreen, hideFullscreen } = initMorsels({ ... });\n\nYou may call the showFullscreen() function returned by the initMorsels call to programatically show the fullscreen search UI.\nCorrespondingly, the hideFullscreen() method hides the fullscreen interface, although, this shouldn’t be needed since a close button is available by default (the Esc key works too).\nThese methods can also be used under mode=\"auto\".\n"],[3,"options-for-generating-result-previews"],[1,"Options for Generating Result Previews"],[2,"\nThere are 3 ways to generate result previews of matched documents, the second being the default.\nUnless you have modified the default result renderer (covered in the next page on renderers), morsels also requires at least one of the body / heading / title fields. This is configured by default, and covered in the next section on indexing configuration in more detail.\n"],[3,"default-rendering-output--purpose"],[1,"Default Rendering Output / Purpose"],[2,"\nThe default use case / result generation assumes the simple but common use case of linking to a source document (via an <a> tag). \nTherefore, source documents are assumed to be available and linkable to. The url of this source document is either:\n\n\nThe sourceFilesUrl option concatenated with the relative file path of the document at the time of indexing (default).\n\nThe relative file path is stored in the _relative_fp field, which is an internally generated field. Combining this with the base url (sourceFilesUrl) forms the full source document link.\n\n\n\nThe link field, a custom field that has to manually mapped from file data.\n\n\nThe use of the default indexed fields in the UI is as shown in the following diagram, and will be covered in more detail in the chapter on fields:\n\nSome indexer configuration presets are available to help with switching between options 1 and 2 easily.\n"],[3,"1-from-source-documents"],[1,"1. From Source Documents"],[2,"\nWhen option 2 below (field stores) is not configured or unavailable, morsels will attempt to retrieve and reparse the source document and its fields in order to generate result previews.\nNote that this option is only applicable for indexed HTML, json, and txt files at this time.\nAs csv files are often used to hold multiple documents (and can therefore get very large), it is unsuitable to be used as a source for search result previews. In this case, options 2 or 3 can be used.\n"],[3,"2-from-field-stores-default"],[1,"2. From Field Stores (default)"],[2,"\nMorsels is also able to generate result previews from its own json field stores generated at indexing time.\nIn order to specify what fields to store, and how to map file data to these fields, refer to the chapter on fields under indexer configuration.\nYou may also wish to use this method even if source documents are available, if filesystem bloat isn’t too much of a concern. Apart from avoiding the additional http requests, the internal json field store comes packed in a format that is more performant to perform result preview generation on.\n"],[3,"3-alternative-rendering-outputs-advanced"],[1,"3. Alternative Rendering Outputs (advanced)"],[2,"\nIt is also possible to create your own result renderer to, for example:\n\nattach an event handler to call a function when a user clicks the result preview\nretrieve and generate result previews from some other API.\n\nNevertheless, the section “From Field Stores” above would still be relevant as it provides the basis for retrieving a document’s fields (e.g. a document id with which to call an API).\nThis is covered in more detail in the next page.\n"],[3,"results-per-page"],[1,"Results Per Page"],[2,"\nresultsPerPage = 8\nIn all UI modes, an infinite scrolling intersection observer is attached to the last search result. When triggered, search result previews are fetched and generated for a number of results only.\nLowering this value can have a noticeable performance improvement on result generation, as more .html / .json files have to be retrieved on-the-fly, parsed, and processed. This is especially true if using option 1 above.\n"],[3,"changing-the-mobile-device-detection-method"],[1,"Changing The Mobile Device Detection Method"],[2,"\nThe mobile device check is done through a simple window.matchMedia('only screen and (max-width: 1024px)').matches query at initialisation time, which may not be robust enough for your use case.\nAn override may be provided through the isMobileDevice option shown below, which is simply a function returning a boolean.\ninitMorsels({\n    isMobileDevice: () => true,\n})\n\n\n"],[3,"search-library-options"],[1,"Search Library Options"],[2,"\nThe options for the search library are rather brief, and can be summarised in this snippet:\ninitMorsels({\n    // Options belonging to @morsels/search-lib, the search library package\n    searcherOptions: {\n        // Base url of output directory that the cli tool generated\n        url: 'http://192.168.10.132:3000/output/',\n        \n        // Maximum number of terms for query term expansion\n        numberOfExpandedTerms: 3,\n        \n        // Override for using query term proximity ranking or not.\n        // Disabled for mobile devices by default\n        useQueryTermProximity: true,\n\n        // Whether to retrieve all field stores on initialisation\n        // (see chapter \"Tradeoffs\" for more details)\n        cacheAllFieldStores: true,\n\n        // The maximum number of results to retrieve (unlimited if null).\n        resultLimit: null,\n    },\n});\n\n"],[3,"automatic-term-expansion"],[1,"Automatic Term Expansion"],[2,"\nnumberOfExpandedTerms\nStemming is turned off in the default language module. This does mean a bigger dictionary (but not too much usually), and lower recall, but much more precise searches.\nTo provide a compromise for recall, query terms that are similar to the searched term are added to the query, although with a lower weight.\nFor all language modules available currently, this is only applied for the last query term, and if the query string does not end with a whitespace. An implicit wildcard (suffix) search is performed on this term. (similar to Algolia Docsearch’s behaviour)\n"],[3,"term-proximity-ranking"],[1,"Term Proximity Ranking"],[2,"\nuseQueryTermProximity\nIf positions are indexed, document scores are also scaled by how close query expressions or terms are to each other.\nThis may be costly for mobile devices however, and is disabled by default in such cases.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"tradeoffs.html"],[0,"Tradeoffs - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"tradeoffs"],[1,"Tradeoffs"],[2,"\n\nThis page goes into detail on how the various indexer presets (small, medium, …) are configured, what tradeoffs they make, and is a (mostly) optional read, especially if your collection isn’t too large.\n\n"],[3,"overview"],[1,"Overview"],[2,"\nEach preset largely makes a tradeoff between your document collection size and the number of rounds of network requests to make. File bloat is also discussed, if it is of concern.\n\nThe last column, RTT=3, is included only for hypothetical discussion but not present in any of the presets!\n\nThe possible tradeoffs are marked with ✔️. Those that are likely impossible are marked ❌ (or in other words, you likely need a search server / SaaS for these options). Options that are possible but are relatively undesirable (for which better equivalent options exist) are marked ⚪. The default tradeoff is marked ⭐. Some roughly equivalent / adjacent options are marked ✔️ as it would depend on your collection, use case and some other factors elaborated below.\nLatency is labelled in terms of RTT (round trip time), the maximum of which is 3. Also note that the labelled RTT times are maximums. (e.g. if files are served from cache instead)\nFactorRTT=0RTT=1RTT=2RTT=3\nFair Scalability,Little File bloat⭐⚪⚪⚪\nFair Scalability,Moderate File bloat⚪⚪⚪⚪\nFair Scalability,Heavy File bloat⚪⚪⚪⚪\nGood Scalability,Little File bloat❌✔️✔️⚪\nGood Scalability,Moderate File bloat❌✔️✔️⚪\nGood Scalability,Heavy File bloat❌✔️✔️⚪\nExcellent Scalability,Little File bloat❌❌❌✔️\nExcellent Scalability,Moderate File bloat❌❌❌✔️\nExcellent Scalability,Heavy File bloat❌❌✔️⚪\nBeyond Excellent Scalability(consider running asearch server / SaaS)❌❌❌❌\n\n"],[3,"monolithic-index"],[1,"Monolithic Index"],[2,"\nOf particular note, the only possible option under RTT=0 is equivalent to using some other existing client side search library and generating a monolithic prebuilt index and document/field store (used for generating result previews).\nYou may still want to use morsels since it packages a search UI, or, if you prefer the simplicity of a cli indexer tool (e.g. for CI build tools).\n"],[3,"configuration"],[1,"Configuration"],[2,"\n\nThis section assumes some knowledge on the options listed below in chapters 4 (barring 4.1) and 5, which will be discussed in briefer detail here:\n\n\nSearch Configuration: \n\n⭐⭐ The method of result preview generation\ncacheAllFieldStores\n\n\nIndexing Configuration:\n\nwhat fields are stored (do_store)\nfield_store_block_size\npl_limit\npl_cache_threshold\n\n\n\nThe following sections discusses some combinations of options that generate the tradeoff results in the table above.\n"],[3,"1-rtt0-fair-scalability-little-file-bloat"],[1,"1. RTT=0, Fair Scalability, Little File Bloat"],[2,"\nTo achieve this result, you will need to ensure everything that is potentially needed is retrieved up front.\n\nSet pl_limit to an arbitrarily large number. This compresses the inverted index into just one or a few files.\nEnsure pl_cache_threshold is set to a very low number (or, at least smaller than the generated inverted index file size), so that all postings lists are loaded up front and cached in memory.\nYou would also want to set field_store_block_size to a fairly high number, and correspondingly set cacheAllFieldStores to true. This allows morsels to load the few field stores during initilisation and persistently cache them.\n\n\n⭐ This is what’s being used by this documentation, since it is fairly small.Nevertheless, RTT=1/2 are still very acceptable settings under good network conditions. RTT=3 may be slightly slow (~600ms assuming decent network conditions), but still quite acceptable depending on your use case since it reduces file bloat.\n\n"],[3,"2-rtt12-good-scalability-moderate--heavy-file-bloat"],[1,"2. RTT=1/2, Good Scalability, Moderate / Heavy File Bloat"],[2,"\nThe impacts of the two options here are discussed under the 2 main methods of result preview generation in the earlier chapter.\n"],[3,"21-generating-result-previews-from-source-files"],[1,"2.1. Generating Result Previews from Source Files"],[2,"\n(RTT=2, Little-Moderate file bloat, Good scalability)\nGenerating result previews from source files greatly reduces file bloat, but it does mean that an extra round (RTT) of network requests has to be made to retrieve said source files.\nHowever, it is also more feasible with this option to reduce a round of network requests by caching all field stores up front, as field stores here only store the relative file path / link from which to retrieve the source files, and are therefore fairly small.\n\nFor example, assuming each link takes an average of 25 bytes to encode (including json fluff), and 3MB (ungzipped) is your comfort zone, you can store up to 120000 document links in a single, cached field store!\n\nThe relevant options here are field_store_block_size and cacheAllFieldStores (simply configure them similar to the earlier RTT=0 case).\n"],[3,"22-generating-result-previews-from-field-stores"],[1,"2.2. Generating Result Previews from Field Stores"],[2,"\n(RTT=2, Moderate-Heavy file bloat, Good scalability)\nGenerating result previews directly from field stores (using the do_store option) avoids having to make an extra round of network requests to retrieve said source files.\nThis however requires fragmenting the field stores, increasing file bloat.\nYou may want to use this option over 2.1 nevertheless if:\n\nResult previews cannot be generated from source files (csv files)\nYou want to increase result preview generation performance (mentioned here)\n\n\nRefer here for a demo of what RTT=2 is like.\n\n"],[3,"improving-21-or-22-to-rtt1"],[1,"Improving 2.1 or 2.2 to RTT=1"],[2,"\nFor moderately sized collections, we may also surmise that the size of the index (a low-level, compressed inverted index) is often far smaller than the size of field stores (which contain the raw document texts).\nThe idea here therefore is to additionally cache the index (using pl_limit, pl_cache_threshold), removing an entire round of network requests.\nThis corresponds to the medium presets in the previous page.\n"],[3,"3-excellent-scalability"],[1,"3. Excellent Scalability"],[2,"\nThe presets here follow from the section directly above, disregarding the assumptions. That is,\n"],[3,"31-generating-result-previews-from-source-files"],[1,"3.1. Generating Result Previews from Source Files"],[2,"\n(RTT=3, Little-Moderate File Bloat, Excellent Scalability)\nPer section 2.1, The RTT compromise is accepted as is in this case, without performing the caching of field stores mentioned.\nThis is because as the collection grows, we cannot guarantee that document links are at a size that can be feasibly and monolithically cached, although, this is highly unlikely even for the most extreme intended use cases of Morsels (see the earlier example calculation of 120000 documents).\n"],[3,"32-generating-result-previews-from-field-stores"],[1,"3.2. Generating Result Previews from Field Stores"],[2,"\n(RTT=2, Heavy File Bloat, Excellent Scalability)\nThis follows section 2.2. No changes are needed here, as both the field stores and index are fragmented.\nAs the collection size grows however, many fragmented files will inevitably be generated, which may be of concern for your use case.\n"],[3,"other-performance-considerations"],[1,"Other Performance Considerations"],[2,"\nThis section discusses some other numbers regarding scaling, and is a really optional read.\n"],[3,"gzip"],[1,"Gzip"],[2,"\nGzip can work hand in hand with the morsels’ own compression schemes.\nWith a monolithic index, expect about 3-4x compression ratios without positions indexed.\nCompression ratios with positions tends to be poorer from some empircal testing, likely since the number of unique positions is fairly large.\nWhen opting to fragment the index heavily however, also note gzip would serve little to no purpose as:\n\nThe fragmented files are already very small\nCompression ratios for smaller files tends to be poorer\n\n\n⭐ Morsels’ binary output files are named .json by default, so you shouldn’t have to manually configure the relevant settings in your server.\n\n"],[3,"limits-of-scalability"],[1,"Limits of Scalability"],[2,"\nScaling the tool requires splitting the index into many chunks. Some of these chunks may however exceed the index fragment size limit (pl_limit), especially when the chunk contains a very common term (e.g. a stop word like “the”). While the information for this term could be further split into multiple chunks, this would be almost pointless as all such chunks would still have to be retrieved when the term is searched.\nThis impacts (depending on the configuration):\n\nThe total size of index chunks retrieved upfront and persistently cached, which exceed the defined pl_cache_threshold.\nThe total size of the index chunks that need to be retrieved for the query, which is relevant when pl_cache_threshold is fairly high (such that no files are cached).\n\n"],[3,"some-data--estimations"],[1,"Some Data & Estimations"],[2,"\nAs a rough estimate from testing, this library should be able to handle text collections < 800MB with positional indexing and stop words kept.\nThe following distribution of index chunk file sizes (before gzip) under the default pl_limit was produced with:\n\nA 380MB csv corpus (no HTML soup!)\nDuplicated once to total about 760MB, and 19088 documents\n\n# Counts\n[7335  219   76   13    7    14    4     1     1     1     0     0     0     1]\n# (Left) Bin Edges, in KB\n[0     100   250  500   750  1000  2000  3000  4000  5000  6000  7000  8000  9000]\n\nMost of the index chunks are well below the default pl_cache_threshold of 1048576 bytes, while the select few above it totals roughly 45MB. Therefore, on startup, 45MB of index chunks are fetched and cached. The remaining bulk of index chunks are retrieved on-demand.\n"],[3,"disabling-positions"],[1,"Disabling Positions"],[2,"\nWithout positional indexing, the index shrinks 3-4 fold, making it potentially possible to index collections ~2gb in size, or even more.\nIn addition, large postings lists are all but removed in this case:\n# Counts with positional information removed\n[4350    0    0    0    0    0    0    0    0    0    0    0    0    0]\n\n"],[3,"removing-stop-words"],[1,"Removing Stop Words"],[2,"\nIf disabling caching via setting a very high pl_cache_threshold, removing stop words when indexing would have little to no effect as such terms are already separated into different postings lists and never retrieved unless necessary.\nOn the other hand, removing stop words with a lower pl_cache_threshold would help to avoid caching the “outliers” on the right of the distribution up front, if initial network usage is a concern.\n# Counts with stop words removed\n[7234  209   65   11    5    1    0    0    0    0    0    0    0    0]\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"getting_started_others.html"],[0,"Others - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"other-use-cases"],[1,"Other Use Cases"],[2,"\nSince its indexer is essentially just a CLI tool, morsels could in-theory be used almost anywhere (e.g. other static site generators) easily without a custom wrapper implementation (such as the Mdbook plugin).\nFor example, to deploy another static site generator to gh-pages using github actions, simply chain the morsels tool on top of the static site generator output:\nname: docs\non:\n  push:\n    branches:\n      - docs\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build documentation\n        run: # <insert your favourite ssg build command>\n      - name: Install Morsels\n        run: cargo install morsels_indexer # or, using the binary release\n      - name: Run Morsels\n        run: morsels <docs_build_folder> <docs_build_folder/morsels_output> -c <morsels_config_path>\n      - name: Deploy to github pages 🚀\n        uses: JamesIves/github-pages-deploy-action@4.1.5\n        with:\n          branch: gh-pages\n          folder: <docs_build_folder>\n\n"],[3,"custom-data-formats-non-html"],[1,"Custom Data Formats (non-HTML)"],[2,"\nSome use cases may not always have HTML files readily available (e.g. pure client-side rendered projects).\nIn such cases, morsels also supports .json and .csv files, which is covered in greater detail later under indexer configuration.\nAnother simpler (but likely slow) alternative you could consider specifically for client-side rendered projects is to display the page in a headless browser, then index said HTML file.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"404.html"],[0,"Page not found - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        "],[3,"document-not-found-404"],[1,"Document not found (404)"],[2,"\nThis URL is invalid, sorry. Please use the navigation bar or search to continue.\n\n                    \n\n                    \n                        \n\n\n                        \n                    \n                \n            \n\n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"getting_started_mdbook.html"],[0,"mdBook - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"mdbook-morsels"],[1,"mdbook-morsels"],[2,"\nmdbook-morsels is a simple search plugin replacement / proof-of-concept for mdbook to use morsels’ search interface and library instead of elasticlunr.js.\n"],[3,"styling"],[1,"Styling"],[2,"\nThis plugin uses the css variables provided by the 5 main default themes in mdBook to style the search user interface. Switch the themes in this documentation to try out the different themes!\nNote: The “Morsels” theme is not included in the plugin and is specific to this documentation. It is included only to show the default styling (without mdbook-morsels).\n"],[3,"installation"],[1,"Installation"],[2,"\nYou will need to have installed the following command-line crates (cargo install <crate-name> or with the binaries in your PATH):\n\nmdbook\nmdbook-morsels\nmorsels_indexer\n\n\n⚠️ Ensure the mdbook-morsels and morsels_indexer versions are the same.\n\nThen, minimally add the first two configuration sections below to your book.toml configuration file:\n[output.html.search]\nenable = false               # disable the default mdBook search feature implementation\n\n[preprocessor.morsels]\ncommand = \"mdbook-morsels\"\nrenderer = [\"html\"]          # this should only be run for the HTML renderer\n\n# Plugin configuration options (optional)\n[output.morsels]\n\n# See search configuration page\nmode = \"target\"\n\n# Relative path to the indexer configuration file from the root project directory\n# This will automatically be created if it dosen't exist.\nconfig = \"morsels_config.json\"\n\n# Don't add the default stylesheet from morsels/search-ui,\n# nor the inline css variables for the default mdbook themes\n#\n# Only needed if you want to use some custom styling\nno-css = false\n\n# This scales some settings of the indexer according to your collection size\n# (see chapter on \"Tradeoffs\")\nscaling = true\n\n"],[3,"preview"],[1,"Preview"],[2,"\nUse the following (non-canonical, documentation specific) buttons to try out the different mode parameters.\n\n\n    Auto\n    Dropdown\n    Fullscreen\n    Target\n\nYou can also try out the different themes on this documentation using mdbook’s paintbrush icon!\n\n\n\nGif of mode='fullscreen' across the different themes\n\n\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"introduction.html"],[0,"Introduction - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"introduction"],[1,"Introduction"],[2,"\nMorsels is a complete client-side search solution tailored for static sites, including a search user interface and library that depends on a pre-built index generated by a command-line tool.\n"],[3,"features"],[1,"Features"],[2,"\n\n\nMulti-threaded 🏇 CLI indexer powered by Rust\n\n\nTypo tolerance ⌨ with spelling correction and automatic prefix search\n\n\nFeature-rich search 🔍: boolean queries, field filters, phrase queries, BM25 scoring, query term proximity boosts, persistent caching and WebWorker built-in\n\n\nPowered by WebAssembly, enabling efficient index (de)compression and query processing \n\n\nSemi-Scalable 📈, achieved by (optionally) splitting the index into chunks (“morsels”).\n\n\nIncremental Indexing\n\n\nCustomisable dropdown / fullscreen popup user interface 🖥️\n\n\n"],[3,"use-cases"],[1,"Use Cases"],[2,"\nYou may want to use this tool if:\n\nYou want a complete solution for static site search\nYou have a fairly large collection of HTML, csv, json or txt (only these are supported for now) files that cannot be monolithically retrieved or kept in memory feasibly\nRunning a search server / SaaS (eg. Algolia Docsearch) is not an option\n\n\n⚠️ \nIt is not possible to use morsels for client-side indexing since the indexer is a cli tool.\nIf this is the use case, consider other lighter-weight libraries like lunr.js that already fit well.\n\n"],[3,"how-it-works"],[1,"How it Works:"],[2,"\n\n"],[3,"other-limitations"],[1,"Other Limitations"],[2,"\n\n\nLatency & File Bloat (only if fragmenting the index)\nScaling this tool for larger collections necessitates fragmenting the index and retrieving only what’s needed when searched, which means extra network requests, but to a reasonable degree. (see this demo)\nThis tool should be able to handle 800MB pure text (not counting things like HTML soup) collections with the full set of features enabled and some configuration tweaking.\nThe degree of fragmentation can be configured to varying degrees. That is, by default, Morsels can, and does function much like other existing monolithic pre-built index options in terms of the number of network requests, and you only “pay for what you need”.\n\n\nWasm – no IE support =(\n\n\nNot production ready!\n\n\nBrowser Focused: For now, the focus is on providing e2e search functionalities in the browser. That means no Node.js support and such.\n\n\n\n\n\n                    \n\n                    \n                        \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"indexer_configuration.html"],[0,"Indexer - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"indexer-configuration"],[1,"Indexer Configuration"],[2,"\nAll indexer configurations are sourced from a json file. By default, the cli tool looks for morsels_config.json in the source folder (first argument specified in the command).\nYou can run the cli command with the --config-init option to initialise the full, default configuration file in the source folder. As the file generated from this option is rather verbose, you could also instead override the necessary properties as covered in the subsequent sections.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"search_configuration_renderers.html"],[0,"Altering HTML outputs - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"altering-html-outputs"],[1,"Altering HTML Outputs"],[2,"\n\n\nThis page covers some APIs that allow you to customise some small parts of the HTML output structure, if required.\n\nSome use cases for this include:\n\nThe default HTML structure is not sufficient for your styling needs\nYou need to attach additional event listeners to elements\nYou want to override or insert additional content sourced from custom fields / static content (e.g. a footer)\nYou want to change the default use case of following through on a result preview to its source document entirely\n\n\n💡 If you only need to style the dropdown or search popup, you can include your own css file to do so and / or override the variables exposed by the default css bundle.\n\nThese API options are similarly specified under the uiOptions key of the root configuration object.\ninitMorsels({\n    uiOptions: {\n        // ...\n    }\n});\n\n"],[3,"the-h-function"],[1,"The h function"],[2,"\nh\nAlmost all APIs here are passed a h function. This is an optional helper function you may use to create elements.\nThe method signature is as such:\nexport type CreateElement = (\n  // Element name\n  name: string,\n\n  // Element attribute map\n  attrs: { [attrName: string]: string },\n\n  /*\n   Child elements (HTMLElement) OR text nodes (just put the string)\n   string parameters utilise .textContent,\n   so you don't have to worry about escaping potentially malicious content\n  */\n  ...children: (string | HTMLElement)[]\n) => HTMLElement;\n\n"],[3,"passing-custom-options"],[1,"Passing Custom Options"],[2,"\nopts\nAll renderer functions are also passed an opts parameter. This is the original input object that you provided to the initMorsels call, with default parameters populated at this point.\nopts = export interface SearchUiOptions {\n  searcherOptions?: SearcherOptions,\n  uiOptions?: UiOptions,\n  isMobileDevice: () => boolean,\n  otherOptions: any\n}\n\nIf you need to include some custom options (e.g. an API base url), you can use the otherOptions key, which is guaranteed to be untouched by morsels.\n"],[3,"changing-supporting-parts-of-the-ui"],[1,"Changing Supporting Parts of the UI"],[2,"\nThe options here are intended for changing small, supporting parts of the output (e.g. error messages), which can be especially useful for localizing the UI.\nFunctionReturnDescription\nerrorRender(h, opts)HTMLElementRenders the element attached under the listContainer (or the target element when using mode = 'target') when an unexpected error occurs.\nnoResultsRender(h, opts)HTMLElementThis API renders the element attached under the listContainer (or the target element when using mode = 'target') when there are no results found for a given query.                                                                                     \nloadingIndicatorRender(h, opts, isInitialising: boolean, wasResultsBlank: boolean)HTMLElementThis API renders the loading indicator attached under the listContainer when running a query.While the search library is doing initialising work, the isInitialising parameter will be true. The wasResultsBlank boolean is true when there are no results yet. You may use this parameter to change the look of the indicator in subsequent queries. In the default design, this corresponds to the spinning indicator on the top right of the search box.\ntermInfoRender(h, opts, queryParts: QueryPart[])HTMLElement[]This API renders element(s) attached under the listContainer related to the searched terms, and is blank by default.This can be used to render messages like “Did you mean spelling? “.\nfsBlankRender(h, opts)( mode='fullscreen' only )HTMLElementThis API renders the element attached under the listContainer when the search box is empty for the fullscreen UI.This contrasts with the dropdown UI which is hidden in such a case.\n\n"],[3,"queryparts-parameter"],[1,"queryParts Parameter"],[2,"\nThis parameter passed to the termInfoRender function is the parsed structure of the input query string.\nIts interface is as follows:\n{\n  partType: 'TERM' | 'PHRASE' | 'BRACKET' | 'AND' | 'NOT';\n\n  // Raw, original term(s) contained, if any of the below 3 operations were applied\n  originalTerms?: string[];\n\n  isCorrected?: boolean;        // did this query part undergo spelling correction?\n  isStopWordRemoved?: boolean;  // did this query part undergo stop word removal?\n  isExpanded?: boolean;         // is this an added / expanded term?\n\n  shouldExpand?: boolean;       // was this term a source for query term expansion?\n\n  fieldName?: string;           // was a field filter applied?\n\n  // Spelling corrected / Expanded / Stop word removed result\n  terms?: string[];\n\n  children?: QueryPart[];\n}\n\n"],[3,"rendering-search-results"],[1,"Rendering Search Results"],[2,"\nThe below 2 mutually exclusive sets of APIs render the results for all document matches. The first, simpler set of APIs are “building blocks” of the second (which only has one available API). Reconfiguring the second API would also invalidate any changes to the first.\n"],[3,"1-rendering-a-single-result"],[1,"1. Rendering a Single Result"],[2,"\nThe APIs under this key are grouped under uiOptions.resultsRenderOpts (instead of uiOptions.XXX).\nThese APIs are more suited for performing smaller modifications for the default use case, for example, displaying an additionally indexed field (e.g. an icon).\n\nlistItemRender(h, opts, fullLink, resultTitle, resultHeadingsAndTexts, fields): HTMLElement\nThis API renders the result for a single document match.\nParameterDescription\nfullLinkfull resource link of the document\nresultTitlethe first extracted title field of the document, if any\nresultHeadingsAndTextsAn array of string or HTMLElement intended to be used as the last parameter of h.This contains the highlighted heading-body pair matches, or body-only matches rendered from headingBodyRender and bodyOnlyRender further below.\nfieldsAll stored fields for the document, as positioned [fieldName, fieldValue] pairs. Useful if adding additional fields.\n\nThe following example shows the default implementation, and how to add an additional field, subtitle, to each result.\nconst subTitleField = fields.find(field => field[0] === 'subtitle');\n\nconst linkEl = h(\n  'a', { class: 'morsels-link' },\n  h('div', { class: 'morsels-title' }, title,\n    h('div', { class: 'morsels-subtitle' }, (subTitleField && subTitleField[1]) || '')\n  ),\n  ...bodies\n);\n\nif (fullLink) {\n  linkEl.setAttribute('href', fullLink);\n}\n\nreturn h(\n  'li', { class: 'morsels-list-item' },\n  linkEl,\n);\n\n"],[3,"11-listitemrender-supporting-apis"],[1,"1.1 listItemRender supporting APIs"],[2,"\nThe remaining 3 APIs below are building blocks of listItemRender, responsible for generating its resultTitle and resultHeadingsAndTexts parameters.\ninterface SearchUiRenderOptions {\n  // Renders a \"heading\" field,\n  // along with the highlighted \"body\" fields that follow it (in document order)\n  headingBodyRender?: (\n    h: CreateElement,\n\n    // The highlighted elements under .morsels-heading. Intended to be used with the 'h' function.\n    headingHighlights: (HTMLElement | string)[],    \n\n    // The highlighted elements under .morsels-body. Intended to be used with the 'h' function.\n    bodyHighlights: (HTMLElement | string)[], \n\n    // Url of the document + The matching heading's id, if any\n    href?: string                             \n  ) => HTMLElement,\n\n\n  // Renders highlighted \"body\" fields without a heading preceding it\n  bodyOnlyRender?: (\n    h: CreateElement,\n\n    // The highlighted elements under .morsels-body. Intended to be used with the 'h' function.\n    bodyHighlights: (HTMLElement | string)[], \n  ) => HTMLElement,\n\n\n  highlightRender?: (\n    h: CreateElement,\n\n    // matched term\n    matchedPart: string,                      \n  ) => HTMLElement,\n}\n\n"],[3,"2-rendering-all-results"],[1,"2. Rendering All Results"],[2,"\nasync resultsRender(h, opts, config, results, query): Promise<HTMLElement[]>\nThis API renders the results for all document matches.\nSome examples use cases are:\n\nAltering the html output structure substantially (e.g. displaying results in a tabular form)\nCalling external API calls to retrieve additional info for generating result previews.\n\nFor this reason, this is also the only async API\n\n\n\nFor example, the default implementation does the following:\n\nCheck the config.fieldInfos if any of body / title / heading fields are stored by the indexer to generate result previews. (Skip to 3 if present)\nIf the document has the internal _relative_fp field and sourceFilesUrl is specified, retrieve the original document (.html or .json), and transform it into the same format as that generated by the indexer.\nTransform and highlight the field stores using the listItemRender set of APIs below.\n\nParameterDescription\nconfigThis is the indexing configuration.\nquerya Query object. query.searchedTerms contains a nested array of grouped terms that were searched. Groupings contain raw terms and their spelling corrections (if any).\nresultsan array of Result objects.This class exposes the getStorageWithFieldNames(): [string, string][] method which returns an array of [field name, field content] pairs.\n\nYou may also refer to the default implementation here to get an idea of how to use the API.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n                    \n                        \n                    \n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]],[[4,"incremental_indexing.html"],[0,"Incremental Indexing - Morsels Documentation"],[2,"\n        \n        \n\n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    \n                        \n\n\n\n\n"],[3,"incremental-indexing"],[1,"Incremental Indexing"],[2,"\nIncremental indexing is also supported by the indexer cli tool.\nDetecting deleted, changed, or added files is done by storing an internal file path –> last modified timestamp map.\nTo use it, simply pass the --incremental or -i option when running the indexer.\n"],[3,"how-it-works"],[1,"How it Works"],[2,"\nAs the core idea of Morsels is to split up the index into many tiny parts, the incremental indexing feature works by “patching” only the files which were updated during the current run. This means that at search time, the same amount of index files are retrieved and searched through as before, to reduce the number of network requests.\nThis is in contrast to a more traditional “segment” based approach you might find in search servers, whereby each incremental indexing run generates an entirely separate “segment”, and segments are merged together at runtime (during search). While this makes sense for traditional search tools, it may unfortunately generate too many network requests for index files and search overhead from merging files, something Morsels is trying to minimise.\n"],[3,"content-based-hashing"],[1,"Content Based Hashing"],[2,"\nThe default change detection currently relies on the last modified time in file metadata. This may not always be guaranteed by the tools that generate the files Morsels indexes, or be an accurate reflection of whether a file’s contents were updated.\nIf file metadata is unavailable for any given file, the file would always be re-indexed as well.\nYou may specify the --incremental-content-hash option in such a case to opt into using a crc32 hash comparison for all files instead. This option should also be specified when running a full index and intending to run incremental indexing somewhere down the line.\nIt should only be marginally more expensive for the majority of cases, and may be the default option in the future.\n"],[3,"circumstances-that-trigger-a-full-reindex"],[1,"Circumstances that Trigger a Full (Re)Index"],[2,"\nNote also, that the following circumstances will forcibly trigger a full reindex:\n\nIf the output folder path does not contain any files indexed by morsels\nIt contains files indexed by a different version of morsels\nThe configuration file (morsels_config.json) was changed in any way\nUsage of the --incremental-content-hash option changed\n\n"],[3,"caveats"],[1,"Caveats"],[2,"\nThere are some additional caveats to note when using this option. Whenever possible, try to run a full reindex of the documents, utilising incremental indexing only when indexing speed is of concern – for example, updating the index repeatedly when developing this documentation (although, the mdbook plugin this documentation is built on currently dosen’t do that).\n"],[3,"collection-statistics"],[1,"Collection Statistics"],[2,"\nCollection statistics used to rank documents will tend to drift off when deleting documents (which also entails updating documents). This is because such documents may contain terms that were not encountered during the current run of incremental indexing (from added / updated documents). Detecting such terms is difficult, as there is no guarantee the deleted documents are available anymore. The alternative would be to store such information in a non-inverted index, but that again takes up extra space =(.\nAs such, the information for these terms may not be “patched”. You may notice some slight drifting in the relative ranking of documents returned after some number of incremental indexing runs, until said terms are encountered again in some other document.\n"],[3,"file-bloat"],[1,"File Bloat"],[2,"\nWhen deleting documents or updating documents, old field stores are not removed. This may lead to file bloat after many incremental indexing runs.\n\n\n\n                    \n\n                    \n                        \n                            \n                                \n                            \n\n\n                        \n                    \n                \n            \n\n            \n                    \n                        \n                    \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n        \n\n\n    \n\n"]]]